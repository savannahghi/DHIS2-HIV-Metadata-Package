{
  "programIndicators": [
    {
      "lastUpdated": "2021-04-23T01:52:33.704",
      "id": "fCkfHnug5iX",
      "created": "2021-04-23T01:52:33.704",
      "name": "Client seroconverted",
      "shortName": "fhi_Client seroconverted",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "expression": "d2:condition('#{K42Ut4xpKVT.bvxCroxAwLk} == 1',1,2)",
      "filter": " d2:hasValue(#{K42Ut4xpKVT.bvxCroxAwLk})",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-04-23T19:47:43.161",
      "id": "p1QYSFifVIy",
      "created": "2021-04-23T19:47:43.161",
      "name": "Days since ART initiation",
      "shortName": "fhi_Days since ART initiation",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "expression": "d2:daysBetween(#{Gxrus0FJbjY.fsD1OlPMqxk},V{current_date})",
      "filter": "d2:hasValue(#{Gxrus0FJbjY.fsD1OlPMqxk})",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-04-23T20:34:39.712",
      "id": "P6nqxRQz969",
      "created": "2021-04-23T20:29:47.763",
      "name": "Days since Last VL (0 indicates never tested)",
      "shortName": "fhi_Days since Last VL",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "expression": "d2:daysBetween(#{IpI6PP8QPgH.vm4J582GoOm},V{current_date})",
      "filter": "d2:hasValue(#{IpI6PP8QPgH.vm4J582GoOm})",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-04-23T01:14:08.697",
      "id": "jMm7Vl356bY",
      "created": "2021-04-23T01:12:11.981",
      "name": "Days since missed ART appointment",
      "shortName": "fhi_Days since missed ART appointment",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "expression": "d2:daysBetween(#{Gxrus0FJbjY.yW214mcMIcs}, V{current_date})",
      "filter": "d2:hasValue(#{Gxrus0FJbjY.yW214mcMIcs})",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-05-06T19:06:17.676",
      "id": "di8W07L9Aw8",
      "created": "2021-04-22T21:23:52.538",
      "name": "Days to next ART appointment",
      "shortName": "fhi_Days to next ART appointment",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "expression": "d2:daysBetween(V{current_date},#{Gxrus0FJbjY.yW214mcMIcs})",
      "filter": "d2:hasValue(#{Gxrus0FJbjY.yW214mcMIcs})",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-05-06T20:36:02.811",
      "id": "HXjZD4xw1ml",
      "created": "2021-04-23T19:20:01.297",
      "name": "Eligible for VL",
      "shortName": "fhi_Eligible for VL",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "description": "1 if eligible with no VL recorded, otherwise 2; evaluates 3 conditions that should be counted: 1) client has been on ART > 6 months but has no VL test; 2) client has been on ART >12 months and < 18 months and doesn't have VL test in the last 6 months and 3) client has been on ART >18 months and doesn't have VL in last 12 months.",
      "expression": "d2:condition('d2:daysBetween(#{Gxrus0FJbjY.fsD1OlPMqxk},V{current_date})>=180  && !d2:hasValue(#{IpI6PP8QPgH.Y8u5lSnpCJg}) && d2:daysBetween(#{Gxrus0FJbjY.fsD1OlPMqxk},V{current_date})<365',1,\nd2:condition('d2:daysBetween(#{Gxrus0FJbjY.fsD1OlPMqxk},V{current_date})>=365 && d2:daysBetween(#{Gxrus0FJbjY.fsD1OlPMqxk},V{current_date})<547 && d2:daysBetween(#{IpI6PP8QPgH.vm4J582GoOm},V{current_date})>180',1,\nd2:condition('d2:daysBetween(#{Gxrus0FJbjY.fsD1OlPMqxk},V{current_date})>=547 && d2:daysBetween(#{IpI6PP8QPgH.vm4J582GoOm},V{current_date})>365',1,2)))",
      "filter": "true",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-04-23T16:25:14.623",
      "id": "HoccmXPxkoL",
      "created": "2021-04-23T11:47:42.641",
      "name": "HIV+ but never on ART",
      "shortName": "fhi_HIV+ but never on ART",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "description": "1 if HIV+ but not on ART, 2 if HIV+ and have ART status, 3 if not HIV+",
      "expression": "d2:condition('#{K42Ut4xpKVT.bvxCroxAwLk} == 1 && d2:hasValue(#{Gxrus0FJbjY.r3UGeljqNxM})', 2, d2:condition('A{tmruMXIFo2s}== 1 && d2:hasValue(#{Gxrus0FJbjY.r3UGeljqNxM})',2,\nd2:condition('(A{tmruMXIFo2s}!= 1 && #{K42Ut4xpKVT.bvxCroxAwLk} != 1) || (A{tmruMXIFo2s}!=1 && !d2:hasValue(#{K42Ut4xpKVT.bvxCroxAwLk})) ',3,\nd2:condition('A{tmruMXIFo2s}== 1 && !d2:hasValue(#{Gxrus0FJbjY.r3UGeljqNxM})',1,\nd2:condition('#{K42Ut4xpKVT.bvxCroxAwLk} == 1 && !d2:hasValue(#{Gxrus0FJbjY.r3UGeljqNxM})',1,0))))) ",
      "filter": "true",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-05-06T19:29:05.403",
      "id": "NjaXvK3wcDz",
      "created": "2021-04-23T01:08:11.122",
      "name": "Missed ART Appointment",
      "shortName": "fhi_Missed ART Appointment",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "description": "evaluates 1 if appointment is missed, 2 if false.",
      "expression": "d2:condition('d2:hasValue(#{Gxrus0FJbjY.yW214mcMIcs}) && d2:daysBetween(V{current_date},#{Gxrus0FJbjY.yW214mcMIcs})<0',1,2)",
      "filter": "true",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-05-06T19:12:57.590",
      "id": "voGzUCzDnnb",
      "created": "2021-04-26T18:06:58.125",
      "name": "Number of ART appointments in next 7 days",
      "shortName": "fhi_Number of ART appointments in next 7 days",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "expression": "d2:condition('d2:daysBetween(V{current_date},#{Gxrus0FJbjY.yW214mcMIcs})<8 && d2:daysBetween(V{current_date},#{Gxrus0FJbjY.yW214mcMIcs})>=0 ',1,0)",
      "filter": "d2:hasValue(#{Gxrus0FJbjY.yW214mcMIcs})",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-05-06T19:34:01.338",
      "id": "tT9mkI87Lte",
      "created": "2021-04-23T16:38:38.468",
      "name": "Number of clients HIV+ but never on ART",
      "shortName": "fhi_Number of clients HIV+ but never on ART",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "description": "1 if HIV+ but not on ART,  else 0",
      "expression": "\nd2:condition('(A{tmruMXIFo2s}== 1 && !d2:hasValue(#{Gxrus0FJbjY.r3UGeljqNxM})) || (#{K42Ut4xpKVT.bvxCroxAwLk} == 1 && !d2:hasValue(#{Gxrus0FJbjY.r3UGeljqNxM}))',1,0)",
      "filter": "true",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    },
    {
      "lastUpdated": "2021-05-06T19:32:03.451",
      "id": "mAUzvgrAv4Q",
      "created": "2021-04-26T20:44:47.803",
      "name": "Number of missed ART appointments",
      "shortName": "fhi_Number of missed ART appointments",
      "aggregationType": "SUM",
      "displayInForm": false,
      "publicAccess": "r-------",
      "expression": "d2:condition('d2:daysBetween(#{Gxrus0FJbjY.yW214mcMIcs}, V{current_date})>0',1,0)",
      "filter": "d2:hasValue(#{Gxrus0FJbjY.yW214mcMIcs})",
      "decimals": 0,
      "analyticsType": "ENROLLMENT",
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "translations": [
        
      ],
      "analyticsPeriodBoundaries": [
        
      ],
      "userGroupAccesses": [
        
      ],
      "attributeValues": [
        
      ],
      "userAccesses": [
        
      ],
      "legendSets": [
        
      ]
    }
  ],
  "eventReports": [
    {
      "lastUpdated": "2021-05-06T19:47:55.347",
      "id": "aKhzC94H2TV",
      "created": "2021-05-06T19:47:32.146",
      "name": "Clients who need to be linked to ART",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "description": "",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "Gxrus0FJbjY"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "LT:2",
          "programIndicator": {
            "id": "HoccmXPxkoL"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "HoccmXPxkoL"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T19:30:33.734",
      "id": "nyeFttIaSoB",
      "created": "2021-05-06T19:30:33.734",
      "name": "Clients with missed ART appointments and no follow-up status recorded",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "Gxrus0FJbjY"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "EQ:1",
          "programIndicator": {
            "id": "NjaXvK3wcDz"
          }
        },
        {
          "filter": "GT:1",
          "programIndicator": {
            "id": "jMm7Vl356bY"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "r3UGeljqNxM",
        "NjaXvK3wcDz",
        "yW214mcMIcs",
        "jMm7Vl356bY"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [
        {
          "filter": "IN:1",
          "programStage": {
            "id": "Gxrus0FJbjY"
          },
          "dataElement": {
            "id": "r3UGeljqNxM"
          }
        },
        {
          "programStage": {
            "id": "Gxrus0FJbjY"
          },
          "dataElement": {
            "id": "yW214mcMIcs"
          }
        }
      ],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T19:12:26.530",
      "id": "c9h1mrzLF3x",
      "created": "2021-05-06T19:12:26.530",
      "name": "ART appointments in the next 7 days",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "Gxrus0FJbjY"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "GT:-1:LT:8",
          "programIndicator": {
            "id": "di8W07L9Aw8"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "r3UGeljqNxM",
        "di8W07L9Aw8"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [
        {
          "filter": "IN:1",
          "programStage": {
            "id": "Gxrus0FJbjY"
          },
          "dataElement": {
            "id": "r3UGeljqNxM"
          }
        }
      ],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T22:10:12.611",
      "id": "twjqEs91yXF",
      "created": "2021-05-06T22:10:12.611",
      "name": "Clients with missed HIV Testing appointments ",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "K42Ut4xpKVT"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "EQ:1",
          "programIndicator": {
            "id": "qJqC8GXWMEx"
          }
        },
        {
          "programIndicator": {
            "id": "T9bj0jon4Ft"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "qJqC8GXWMEx",
        "T9bj0jon4Ft",
        "z1FCqdwXo7y"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [
        {
          "programStage": {
            "id": "K42Ut4xpKVT"
          },
          "dataElement": {
            "id": "z1FCqdwXo7y"
          }
        }
      ],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T22:09:02.407",
      "id": "M83ZxwnXdqX",
      "created": "2021-05-06T22:09:02.407",
      "name": "HIV Testing appointments in the next 7 days",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "K42Ut4xpKVT"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "GT:-1:LT:8",
          "programIndicator": {
            "id": "Hr0zUv2SaEI"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "Hr0zUv2SaEI"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T20:10:44.120",
      "id": "flRyD0tJ80U",
      "created": "2021-05-06T20:10:44.120",
      "name": "PrEP appointments in the next 7 days",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "yoJsdudWbCn"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "GT:-1:LT:8",
          "programIndicator": {
            "id": "W6SmfGBZiV7"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "yOEOlKfJB4f",
        "W6SmfGBZiV7"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [
        {
          "filter": "IN:2;4;1",
          "programStage": {
            "id": "yoJsdudWbCn"
          },
          "dataElement": {
            "id": "yOEOlKfJB4f"
          }
        }
      ],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T20:16:07.924",
      "id": "VnJVFDI77Zu",
      "created": "2021-05-06T20:16:07.924",
      "name": "Clients with missed PrEP appointments and no follow-up status recorded",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "yoJsdudWbCn"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "EQ:1",
          "programIndicator": {
            "id": "C3PLHzHu2hG"
          }
        },
        {
          "programIndicator": {
            "id": "BqMcI2MkecQ"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "C3PLHzHu2hG",
        "BqMcI2MkecQ",
        "SSgem2p96rv"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [
        {
          "programStage": {
            "id": "yoJsdudWbCn"
          },
          "dataElement": {
            "id": "SSgem2p96rv"
          }
        }
      ],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T18:36:08.099",
      "id": "eYn2DxsYEMB",
      "created": "2021-05-06T18:36:08.099",
      "name": "PrEP Referrals never completed",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "yoJsdudWbCn"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "EQ:1",
          "programIndicator": {
            "id": "ot2b7DyBNtz"
          }
        },
        {
          "filter": "LT:2",
          "programIndicator": {
            "id": "vMOIlDO2N2i"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "ot2b7DyBNtz",
        "vMOIlDO2N2i"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T18:36:36.029",
      "id": "iWYFNBOttUN",
      "created": "2021-05-06T18:36:36.029",
      "name": "ART Referrals never completed",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "Gxrus0FJbjY"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "EQ:1",
          "programIndicator": {
            "id": "LRMKNyOCGk3"
          }
        },
        {
          "filter": "LT:2",
          "programIndicator": {
            "id": "yTVQEPiIvxr"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "LRMKNyOCGk3",
        "yTVQEPiIvxr"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T18:56:25.087",
      "id": "UyhvQ0sIGsq",
      "created": "2021-05-06T18:56:05.458",
      "name": "Violence Disclosure Referrals never completed",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "description": "",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "J55BklvQ5ua"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "EQ:1",
          "programIndicator": {
            "id": "RgR6tWBZDj1"
          }
        },
        {
          "filter": "LT:2",
          "programIndicator": {
            "id": "IVHMwGvhCFL"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "RgR6tWBZDj1",
        "IVHMwGvhCFL"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T18:33:43.667",
      "id": "vD7FlA0Rknh",
      "created": "2021-05-06T18:33:43.667",
      "name": "MAT Referrals never completed",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "zqNg5lihvm5"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "EQ:1",
          "programIndicator": {
            "id": "brX6J2c0DxA"
          }
        },
        {
          "filter": "LT:2",
          "programIndicator": {
            "id": "hJnuSKgocno"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "brX6J2c0DxA",
        "hJnuSKgocno"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T18:54:57.813",
      "id": "EBxBtLTXz67",
      "created": "2021-05-06T18:54:57.813",
      "name": "TB Referrals never completed",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "M8l5jv8ICwM"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "EQ:1",
          "programIndicator": {
            "id": "sbrb8mlUSSu"
          }
        },
        {
          "filter": "LT:2",
          "programIndicator": {
            "id": "jcVygzkjQ3M"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "sbrb8mlUSSu",
        "jcVygzkjQ3M"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T18:53:45.828",
      "id": "UsiRifRCny5",
      "created": "2021-05-06T18:53:45.828",
      "name": "STI Referrals never completed",
      "publicAccess": "rw------",
      "userOrganisationUnitChildren": false,
      "hideEmptyRows": false,
      "userOrganisationUnit": false,
      "rowSubTotals": false,
      "hideNaData": false,
      "displayDensity": "NORMAL",
      "dataType": "EVENTS",
      "completedOnly": false,
      "colTotals": true,
      "showDimensionLabels": true,
      "sortOrder": 0,
      "fontSize": "NORMAL",
      "topLimit": 0,
      "collapseDataDimensions": false,
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "outputType": "ENROLLMENT",
      "externalAccess": false,
      "colSubTotals": true,
      "showHierarchy": false,
      "rowTotals": false,
      "digitGroupSeparator": "SPACE",
      "hideTitle": false,
      "program": {
        "id": "xrwtYQH5ZLa"
      },
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "programStage": {
        "id": "jlTiw4ijD4r"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "attributeDimensions": [
        {
          "attribute": {
            "id": "otereslUoZH"
          }
        },
        {
          "attribute": {
            "id": "EoUadudZhJK"
          }
        }
      ],
      "translations": [],
      "filterDimensions": [],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "programIndicatorDimensions": [
        {
          "filter": "EQ:1",
          "programIndicator": {
            "id": "ldc3cX9J5Ko"
          }
        },
        {
          "filter": "LT:2",
          "programIndicator": {
            "id": "O09ZjbxBDgr"
          }
        }
      ],
      "subscribers": [],
      "columnDimensions": [
        "pe",
        "ou",
        "otereslUoZH",
        "EoUadudZhJK",
        "ldc3cX9J5Ko",
        "O09ZjbxBDgr"
      ],
      "userAccesses": [],
      "favorites": [],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "dataElementDimensions": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": [],
      "rowDimensions": []
    }            
  ],  
  "charts": [
    {
      "lastUpdated": "2021-05-06T23:40:43.212",
      "id": "Ifi9hGntlsR",
      "created": "2021-04-26T13:51:30.514",
      "name": "Clinical Cascade",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "COLUMN",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "category": "pe",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": true,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "d7jsoHPfd94"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "Bmdw5ttSnkd"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "bMAxVgW0Yn2"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "dry7EIjTFqm"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T23:22:00.714",
      "id": "tP1ENrAN8vr",
      "created": "2021-04-19T15:14:09.831",
      "name": "TX_CURR",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": true,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "KZtMcrl863G"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T23:46:32.248",
      "id": "UXasAB4h5qa",
      "created": "2021-04-19T16:45:04.492",
      "name": "Negative Cascade",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "COLUMN",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "category": "pe",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": true,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "ZqF4ysSC46y"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "xXcJuBrR6VR"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "DRJvZnxxUSE"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "wDz46jUd6S1"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T23:37:14.414",
      "id": "xuRE4BJqiV0",
      "created": "2021-04-19T16:45:04.492",
      "name": "Positive Cascade - Currently on ART",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "COLUMN",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "category": "pe",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": true,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "Z9tERCVGoit"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "wP2ZubOx55y"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "dvxBaBD5MCt"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "h3HJgwbhCJc"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T23:39:04.954",
      "id": "ET24pBrrreD",
      "created": "2021-04-19T15:14:09.831",
      "name": "KP_PREV",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": true,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "d7jsoHPfd94"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T23:43:45.979",
      "id": "LjYkGFic1eB",
      "created": "2021-04-19T15:14:09.831",
      "name": "PrEP_CURR",
      "showData": true,
      "publicAccess": "r-------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": true,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "NBDNYflpOi1"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T23:41:07.223",
      "id": "ou1dpJs0lRT",
      "created": "2021-04-19T15:14:09.831",
      "name": "HTS_TST_POS",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": true,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "bMAxVgW0Yn2"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T23:39:30.252",
      "id": "JjIAAXxCBUV",
      "created": "2021-04-19T15:14:09.831",
      "name": "HTS_TST",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": true,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "Bmdw5ttSnkd"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T23:36:14.951",
      "id": "t3DZRzLI0wl",
      "created": "2021-04-19T16:45:04.492",
      "name": "Positive Cascade - Newly on ART",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "COLUMN",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "category": "pe",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": true,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "no78Rp8Rbop"
          }
        },
        {
          "dataDimensionItemType": "INDICATOR",
          "indicator": {
            "id": "vmUEJA3PDya"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-04-23T16:41:49.973",
      "id": "an9NYtbh7A6",
      "created": "2021-04-19T15:14:09.831",
      "name": "HIV+ clients who have not been linked to ART",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "description": "Excludes clients who started ART and stopped",
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "PROGRAM_INDICATOR",
          "programIndicator": {
            "id": "tT9mkI87Lte"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-04-27T15:30:39.181",
      "id": "mG6slsM2BGO",
      "created": "2021-04-19T15:14:09.831",
      "name": "Missed ART appointments",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "qRu8xzD2m6m"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": true,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "qRu8xzD2m6m"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "PROGRAM_INDICATOR",
          "programIndicator": {
            "id": "mAUzvgrAv4Q"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T20:41:52.217",
      "id": "VwtCHz84tyq",
      "created": "2021-04-19T15:14:09.831",
      "name": "Upcoming ART appointments",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "PROGRAM_INDICATOR",
          "programIndicator": {
            "id": "voGzUCzDnnb"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T22:07:11.857",
      "id": "wnU4CP0CiEb",
      "created": "2021-04-19T15:14:09.831",
      "name": "Upcoming HIV Testing appointments",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "PROGRAM_INDICATOR",
          "programIndicator": {
            "id": "ehEXlk4joFG"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T22:07:50.515",
      "id": "BsNjimLJEnQ",
      "created": "2021-04-19T15:14:09.831",
      "name": "Missed HIV Testing appointments",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "PROGRAM_INDICATOR",
          "programIndicator": {
            "id": "JSlQZezJFbj"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T20:06:29.057",
      "id": "f9Zm8D0CiZs",
      "created": "2021-04-19T15:14:09.831",
      "name": "Missed PrEP appointments",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "PROGRAM_INDICATOR",
          "programIndicator": {
            "id": "CPg1T8EnVDj"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    },
    {
      "lastUpdated": "2021-05-06T20:05:43.314",
      "id": "vkWVUMk6XWb",
      "created": "2021-04-19T15:14:09.831",
      "name": "Upcoming PrEP appointments",
      "showData": true,
      "publicAccess": "--------",
      "userOrganisationUnitChildren": false,
      "type": "SINGLE_VALUE",
      "userOrganisationUnit": false,
      "regressionType": "NONE",
      "completedOnly": false,
      "cumulativeValues": false,
      "sortOrder": 0,
      "hideEmptyRowItems": "NONE",
      "aggregationType": "DEFAULT",
      "userOrganisationUnitGrandChildren": false,
      "hideSubtitle": false,
      "hideLegend": false,
      "externalAccess": false,
      "percentStackedValues": false,
      "noSpaceBetweenColumns": false,
      "hideTitle": false,
      "series": "dx",
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "relativePeriods": {
        "thisYear": true,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": true,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "dataElementGroupSetDimensions": [],
      "translations": [],
      "yearlySeries": [],
      "filterDimensions": [
        "ou",
        "pe"
      ],
      "itemOrganisationUnitGroups": [],
      "userGroupAccesses": [],
      "subscribers": [],
      "userAccesses": [],
      "favorites": [],
      "dataDimensionItems": [
        {
          "dataDimensionItemType": "PROGRAM_INDICATOR",
          "programIndicator": {
            "id": "vaqXdih0PQw"
          }
        }
      ],
      "categoryOptionGroupSetDimensions": [],
      "organisationUnitGroupSetDimensions": [],
      "organisationUnitLevels": [],
      "seriesItems": [],
      "periods": [],
      "organisationUnits": [
        {
          "id": "Jvjb146lLsV"
        },
        {
          "id": "EeOx3h6JIR0"
        }
      ],
      "categoryDimensions": []
    }                
  ],
  "reports": [
    {
      "created": "2020-12-10T12:42:33.519",
      "lastUpdated": "2021-01-11T09:28:13.276",
      "name": "Hotspot",
      "id": "rgaLgFXvJrD",
      "designContent": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>KP and PW Count by Hotspot</title>\n    <style>body {\n  font-family: 'Roboto', sans-serif;\n}\n.center-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n#report-title {\n  font-weight: 400;\n}\n#data-table {\n  border-collapse: collapse;\n  width: 100%;\n}\n#data-table td,\n#data-table th {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n#data-table th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  background-color: #1a6794;\n  color: white;\n}\n#data-table tr:nth-child(even) {\n  background-color: #f2faff;\n}\n\n#loader {\n  margin-top: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.loader {\n  border: 4px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 4px solid #3498db;\n  width: 30px;\n  height: 30px;\n  animation: spin 1s linear infinite;\n}\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.loading-text {\n  margin-left: 10px;\n}\n</style>\n  </head>\n  <body>\n    <div>\n      <div class=\"center-content\">\n        <h1 id=\"report-title\">Clients and Peer Workers by Hotspot</h1>\n      </div>\n      <div>\n        <table id=\"data-table\">\n          <thead>\n            <tr>\n              <th>Hotspot</th>\n              <th>Clients</th>\n              <th>Peer Workers</th>\n              <th>Client Peer Worker Ratio</th>\n            </tr>\n          </thead>\n          <tbody></tbody>\n        </table>\n        <span id=\"loader\"><div class=\"loader\"></div><div class=\"loading-text\">Loading tracked entity instances...<div></span>\n      </div>\n    </div>\n  </body>\n</html>\n<script>const GLOBAL = {\n  programs: {\n    hotspots: 'TljZtip0OB2',\n    clients: 'xrwtYQH5ZLa',\n    peerWorkers: 'VlhhDEete7p',\n    contacts: 'yoyUtVn5Gop'\n  },\n  names: {\n    TljZtip0OB2: ['garBktaoHJs'],\n    xrwtYQH5ZLa: ['otereslUoZH', 'EoUadudZhJK'],\n    VlhhDEete7p: ['otereslUoZH', 'EoUadudZhJK'],\n    yoyUtVn5Gop: ['otereslUoZH', 'EoUadudZhJK']\n  },\n  relationTypeToPrograms: {\n    Fu2r3tVR5PL: ['TljZtip0OB2', 'xrwtYQH5ZLa'],\n    PlgvrJqKITC: ['VlhhDEete7p', 'xrwtYQH5ZLa'],\n    YWSVH34f3AB: ['yoyUtVn5Gop', 'xrwtYQH5ZLa']\n  },\n}\n\n/** \n * Swap keys and values on an object (only works for literal values)\n * @param obj {object}: Object with depth 1 and literal values\n * @returns {object}: With keys and values swapped\n */\nfunction reverseObj(obj){\n  const result = {}\n  Object.keys(obj).map(key => result[obj[key]] = key)\n  return result\n}\n\n/** \n * Get attribute value from TEI attributes\n * @param attributes {array}: Array of attributes on the TEI\n * @param attributeUid {string}: Attribute uid to look for\n * @returns {string || undefined}: Value for specified attribute\n */\nconst getAttrValue = (attributes, attributeUid) => {\n  const filteredAttributes = attributes.filter(\n    (attr) => attr.attribute === attributeUid\n  )\n  if (filteredAttributes.length === 1) {\n    return filteredAttributes[0].value\n  } else if (filteredAttributes.length > 1) {\n    throw `More than one value found for ${attributeUid}`\n  } else {\n    return undefined\n  }\n}\n\n/** \n * Get all data for all TEIs in the specified program(s)\n * @param programUids {string}: String for a DHIS2 program UID\n * @returns {array}: Array of DHIS2 TEI objects\n */\nasync function getTeis(programUid) {\n  const params = {\n    program: programUid,\n    ou: await getRootOU(),\n    ouMode: 'DESCENDANTS',\n    fields: 'trackedEntityInstance,attributes,relationships(relationshipType,from,to),enrollments(program)',\n  }\n  const resp = await getUtil('trackedEntityInstances', params)\n  const data = await resp.json()\n  return data['trackedEntityInstances']\n}\n\n/**\n * Search for the TEI name from the attributes, where attribute needed depends on the program\n * @param prgUid {string}: DHIS2 program uid\n * @param attributes {object}: DHIS2 TEI attributes\n * @returns {string}: TEI name identifier from attributes\n */\nfunction getTeiName(prgUid, attributes) {\n  const nameFields = GLOBAL.names[prgUid]\n  let name = []\n  for (const attrUid of nameFields) {\n    const attrVal = getAttrValue(attributes, attrUid)\n    if (!!attrVal) {\n      name.push(attrVal)\n    }\n  }\n  return name.join(' ')\n}\n\n\n/** \n * Get all TEIs in the system, by program \n * @returns {object}: Object with program names as keys and array values with\n *                    the teis for that program\n*/\nasync function getTeisByProgram() {\n  const teisByPrg = {}\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = await getTeis(prgUid)\n    teisByPrg[prgName] = teis\n  }\n  return teisByPrg\n}\n\n/**\n * Create a map from teiUid to teiName\n * @param {object} teisByPrg: Object with program names as keys and array values with\n *                            the teis for that program\n * @returns {object}: Map from tei uid to tei name\n */\nfunction getTeiUidNameMap(teisByPrg) {\n  const teiNameMap = {}\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      teiNameMap[tei.trackedEntityInstance] = getTeiName(prgUid, tei.attributes) || \"\"\n    }\n  }\n  return teiNameMap\n}\n\n/* EXAMPLE relationship map structure\n{\n  \"hotspots\": {\n    \"abc\": {\n      \"name\": \"HS1\", \n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"clients\": {\n    \"def\": {\n      \"name\": \"Cl1\", \n      \"hotspots\": {\"abc\": {\"name\": \"HS1\"}},\n      \"peerWorkers\": {\"ghi\": {\"name\": \"PW1\"}},\n      \"contacts\": {\"jkl\": {\"name\": \"Co1\"}}\n    }\n  },\n  \"peerWorkers\": {\n    \"ghi\": {\n      \"name\": \"PW1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"contacts\": {\n    \"jkl\": {\n      \"name\": \"Co1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  }\n}\n*/\n\n/**\n * Create mapping between different TEIs from each program\n * @returns {object} Object detailing relationships between each TEI by program\n */\n async function makeRelationshipMap() {\n  const prgUidNameMap = reverseObj(GLOBAL.programs)\n  const teisByPrg = await getTeisByProgram()\n  const teiUidNameMap = getTeiUidNameMap(teisByPrg)\n  const teiMap = {}\n  for (const prgName in GLOBAL.programs) {\n    teiMap[prgName] = {}\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      const teiUid = tei.trackedEntityInstance\n      const teiInfo = {name: teiUidNameMap[teiUid]}\n      for (const rel of tei.relationships) {\n        const programs = GLOBAL.relationTypeToPrograms[rel.relationshipType]\n        const otherProgram = programs.filter(thisPrgUid => thisPrgUid !== prgUid)[0]\n        const otherPrgName = prgUidNameMap[otherProgram]\n        const relTeis = [\n          rel.from.trackedEntityInstance.trackedEntityInstance, \n          rel.to.trackedEntityInstance.trackedEntityInstance\n        ]\n        const otherTeiUid = relTeis.filter(thisTeiUid => thisTeiUid !== teiUid)[0]\n        if (!(otherPrgName in teiInfo)) {\n          teiInfo[otherPrgName] = {}\n        }\n        teiInfo[otherPrgName][otherTeiUid] = {name: teiUidNameMap[otherTeiUid]}\n      }\n      teiMap[prgName][teiUid] = teiInfo\n    }\n  }\n  return teiMap\n}\n\n$(() => {\n  makeRelationshipMap()\n})\n\n// - - - - - - - - - - - - - //\n/* --- General Utilities --- */\n// - - - - - - - - - - - - - //\n\n/** \n * Return the id for the root org unit in the system\n * @returns {string}: String for the root OU in the system\n */\nasync function getRootOU() {\n  const params = {\n    fields: 'id',\n    filter: 'level:eq:1',\n  }\n  const resp = await getUtil('organisationUnits', params)\n  const data = await resp.json()\n  const rootOu = data.organisationUnits\n  if (rootOu.length === 1) {\n    return rootOu[0].id\n  } else {\n    throw `Found ${rootOu.length} root OUs, need only 1 root OU to continue`\n  }\n}\n\n/**\n * Returns a promise which resolves to the requested data\n * @param {string} endpoint DHIS2 endpoint to reqest to\n * @param {object} params Parameters for request\n * @returns {Promise} Which resolves to the requested data\n */\nfunction getUtil(endpoint, params) {\n  const paramStr = formatParams(params)\n  const reqUrl = `/api/${endpoint}?${paramStr}`\n  return fetch(reqUrl)\n}\n\n/** \n * Process a key: value params object and return a params url string\n * @param {object} params: An object with keys and strings or string arrays to format\n * @returns {String}: A string with the keys and values formatted for an api request\n */\nconst formatParams = (params) => {\n  const paramsArr = []\n  for (key in params) {\n    if (params.hasOwnProperty(key)) {\n      if (Array.isArray(params[key])) {\n        for (const value of params[key]) {\n          paramsArr.push(`${key}=${value}`)\n        }\n      } else {\n        paramsArr.push(`${key}=${params[key]}`)\n      }\n    }\n  }\n  return paramsArr.join('&')\n}\n\n\n$(() => {\n  main()\n})\n\nasync function main() {\n  const relationshipMap = await makeRelationshipMap()\n  $('#loader').hide()\n  const hotspotCounts = getCountsPerHotspot(relationshipMap)\n  updateTable(hotspotCounts)\n}\n\n/**\n * Get ratio of two numbers, but return ∞ or 0 division\n * @param {number} numerator \n * @param {number} denominator \n * @returns {string} Ratio value\n */\nfunction getRatio(numerator, denominator) {\n  if (numerator === 0 && denominator === 0) {\n    return '0'\n  } else if (denominator === 0) {\n    return '∞'\n  } else {\n    return `${(numerator / denominator).toFixed(1)}`\n  }\n}\n\n/**\n * Transform the raw data from DHIS2 into a format more easily rendered into a table\n * @param teiData {array}: Array of DHIS2 TEI objects\n * @returns {array}: Array of hotspots containing count of clients and pw and ratio\n */\nfunction getCountsPerHotspot(relationshipMap) {\n  const result = []\n  for (const hotspotUid in relationshipMap.hotspots) {\n    const hotspot = relationshipMap.hotspots[hotspotUid]\n    const clientCount = 'clients' in hotspot ? Object.keys(hotspot.clients).length : 0\n    let peerWorkerCount = 0\n    if (clientCount > 0) {\n      for (const clientUid in hotspot.clients) {\n        if (clientUid in relationshipMap.clients) {\n          const client = relationshipMap.clients[clientUid]\n          peerWorkerCount += 'peerWorkers' in client ? Object.keys(client.peerWorkers).length : 0\n        } else {\n          console.warn(`Found client ${clientUid} at hotspot ${hotspot.name}, however ${clientUid} does not exist in the program data`)\n        }\n        \n      }\n    }\n    const ratio = getRatio(clientCount, peerWorkerCount)\n    result.push({hotspotName: hotspot.name, clientCount, peerWorkerCount, ratio})\n  }\n  return result\n}\n\n/**\n * Re-render the table with the new data\n * @param tableData {array}: Array of objects holding table data in the format:\n *                           {hotspotName, clientRelationships, peerWorkerRelationships, relationshipRatio}\n * returns {undefined}: Because function updates the DOM\n */\nfunction updateTable(tableData) {\n  const $tbody = $('#data-table').children('tbody')\n  $tbody.empty()\n  for (const rowData of tableData) {\n    const {\n      hotspotName,\n      clientCount,\n      peerWorkerCount,\n      ratio,\n    } = rowData\n    const rowElements = `<td>${hotspotName}</td><td>${clientCount}</td><td>${peerWorkerCount}</td><td>${ratio}</td>`\n    $tbody.append(`<tr>${rowElements}</tr>`)\n  }\n}\n\n\n</script>",
      "publicAccess": "rw------",
      "type": "HTML",
      "externalAccess": false,
      "cacheStrategy": "NO_CACHE",
      "lastUpdatedBy": {
        "id": "M5zQapPyTZI"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "reportParams": {
        "paramGrandParentOrganisationUnit": false,
        "paramReportingPeriod": false,
        "paramOrganisationUnit": true,
        "paramParentOrganisationUnit": false
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "userGroupAccesses": [],
      "translations": [],
      "userAccesses": []
    },
    {
      "created": "2021-01-04T10:30:14.703",
      "lastUpdated": "2021-01-11T10:08:16.333",
      "name": "Index contacts",
      "id": "MiIoZRISxiS",
      "designContent": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Contact info peer worker</title>\n    <style>body {\n  font-family: 'Roboto', sans-serif;\n}\n.center-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n#report-title {\n  font-weight: 400;\n}\n.data-table {\n  border-collapse: collapse;\n  width: 100%;\n  margin-bottom: 50px;\n}\n.data-table td,\n.data-table th {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n.data-table th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  background-color: #1a6794;\n  color: white;\n}\n.data-table tr:nth-child(even) {\n  background-color: #f2faff;\n}\n.data-table td:nth-child(n + 2) {\n  text-align: center;\n}\n\n.small-font {\n  font-size: 0.9em;\n}\n\n.no-data {\n  text-align: center;\n}\n\n#loader {\n  margin-top: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.loader {\n  border: 4px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 4px solid #3498db;\n  width: 30px;\n  height: 30px;\n  animation: spin 1s linear infinite;\n}\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.loading-text {\n  margin-left: 10px;\n}\n\n.report-header {\n  padding-bottom: 15px;\n}\n\n.flex {\n  display: flex;\n}\n\n.custom-select {\n  padding: 0 30px;\n}\n\n.dropdown-btn {\n  background-color: #3498db;\n  color: white;\n  padding: 16px;\n  font-size: 16px;\n  border: none;\n  cursor: pointer;\n  width: 200px;\n}\n\n.dropdown-btn:hover,\n.dropdown-btn:focus {\n  background-color: #2980b9;\n}\n\n.dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  background-color: #f1f1f1;\n  min-width: 160px;\n  width: 100%;\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n}\n\n.dropdown-content a {\n  color: black;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block;\n  overflow: auto;\n}\n.dropdown-content a:hover {\n  background-color: #ddd;\n}\n\n.show {\n  display: block;\n}\n</style>\n  </head>\n  <body>\n    <div>\n      <div class=\"center-content report-header\">\n        <h1 id=\"report-title\">Contact info peer worker</h1>\n        <span id=\"user-selections\" class=\"flex\">\n          <div id=\"peerworker-select\" class=\"custom-select\"></div>\n        </span>\n      </div>\n      <div style=\"display: none\">\n        <table id=\"table-template\" class=\"data-table\">\n          <thead>\n            <tr>\n              <th class=\"kp-name\"></th>\n              <th class=\"kp-number\"></th>\n            </tr>\n            <tr>\n              <th>First name</th>\n              <th>Last name</th>\n              <th>Phone number</th>\n              <th>Relationship</th>\n              <th>PNS approach</th>\n              <th>Last contact outcome</th>\n            </tr>\n          </thead>\n          <tbody></tbody>\n        </table>\n      </div>\n      <div id=\"report-content\" style=\"display: none\"></div>\n    </div>\n    <span id=\"loader\">\n      <div class=\"loader\"></div>\n      <div class=\"loading-text\">Loading tracked entity instances...</div>\n    </span>\n  </body>\n</html>\n<script> const GLOBAL = {\n  programs: {\n    hotspots: 'TljZtip0OB2',\n    clients: 'xrwtYQH5ZLa',\n    peerWorkers: 'VlhhDEete7p',\n    contacts: 'yoyUtVn5Gop',\n  },\n  names: {\n    TljZtip0OB2: ['garBktaoHJs'],\n    xrwtYQH5ZLa: ['otereslUoZH', 'EoUadudZhJK'],\n    VlhhDEete7p: ['otereslUoZH', 'EoUadudZhJK'],\n    yoyUtVn5Gop: ['otereslUoZH', 'EoUadudZhJK'],\n  },\n  relationTypeToPrograms: {\n    Fu2r3tVR5PL: ['TljZtip0OB2', 'xrwtYQH5ZLa'],\n    PlgvrJqKITC: ['VlhhDEete7p', 'xrwtYQH5ZLa'],\n    YWSVH34f3AB: ['yoyUtVn5Gop', 'xrwtYQH5ZLa'],\n  },\n}\n\n/**\n * Swap keys and values on an object (only works for literal values)\n * @param obj {object}: Object with depth 1 and literal values\n * @returns {object}: With keys and values swapped\n */\nfunction reverseObj(obj) {\n  const result = {}\n  Object.keys(obj).map((key) => (result[obj[key]] = key))\n  return result\n}\n\n/**\n * Get attribute value from TEI attributes\n * @param attributes {array}: Array of attributes on the TEI\n * @param attributeUid {string}: Attribute uid to look for\n * @returns {string || undefined}: Value for specified attribute\n */\nconst getAttrValue = (attributes, attributeUid) => {\n  const filteredAttributes = attributes.filter(\n    (attr) => attr.attribute === attributeUid\n  )\n  if (filteredAttributes.length === 1) {\n    return filteredAttributes[0].value\n  } else if (filteredAttributes.length > 1) {\n    throw new Error(`More than one value found for ${attributeUid}`)\n  } else {\n    return null\n  }\n}\n\n/**\n * Get the value associated with a given data element if it exists in the given data values\n * @param {Array} dvs Array of DHIS2 data values\n * @param {string} deUid DHIS2 data element UID\n */\nfunction getDataValue(dvs, deUid) {\n  const filteredDvs = dvs.filter((dv) => dv.dataElement === deUid)\n  if (filteredDvs.length === 1) {\n    return filteredDvs[0].value\n  } else if (filteredDvs.length > 1) {\n    throw new Error(`More than one value found for ${deUid}`)\n  } else {\n    return null\n  }\n}\n\n/**\n * Get all data for all TEIs in the specified program(s)\n * @param programUids {string}: String for a DHIS2 program UID\n * @returns {array}: Array of DHIS2 TEI objects\n */\nasync function getTeis(programUid, orgUnit) {\n  const params = {\n    program: programUid,\n    ou: orgUnit || (await getRootOU()),\n    ouMode: 'DESCENDANTS',\n    fields:\n      'trackedEntityInstance,attributes,relationships(relationshipType,from,to),enrollments(program)',\n  }\n  const resp = await getUtil('trackedEntityInstances', params)\n  const data = await resp.json()\n  return data['trackedEntityInstances']\n}\n\n/**\n * Search for the TEI name from the attributes, where attribute needed depends on the program\n * @param prgUid {string}: DHIS2 program uid\n * @param attributes {object}: DHIS2 TEI attributes\n * @returns {string}: TEI name identifier from attributes\n */\nfunction getTeiName(prgUid, attributes) {\n  const nameFields = GLOBAL.names[prgUid]\n  let name = []\n  for (const attrUid of nameFields) {\n    const attrVal = getAttrValue(attributes, attrUid)\n    if (!!attrVal) {\n      name.push(attrVal)\n    }\n  }\n  return name.join(' ')\n}\n\n/**\n * Get all TEIs in the system, by program\n * @returns {object}: Object with program names as keys and array values with\n *                    the teis for that program\n */\nasync function getTeisByProgram() {\n  const teisByPrg = {}\n  const rootOU = await getRootOU()\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = await getTeis(prgUid, rootOU)\n    teisByPrg[prgName] = teis\n  }\n  return teisByPrg\n}\n\n/**\n * Create a map from teiUid to teiName\n * @param {object} teisByPrg: Object with program names as keys and array values with\n *                            the teis for that program\n * @returns {object}: Map from tei uid to tei name\n */\nfunction getTeiUidNameMap(teisByPrg) {\n  const teiNameMap = {}\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      teiNameMap[tei.trackedEntityInstance] =\n        getTeiName(prgUid, tei.attributes) || ''\n    }\n  }\n  return teiNameMap\n}\n\n/* EXAMPLE relationship map structure\n{\n  \"hotspots\": {\n    \"abc\": {\n      \"name\": \"HS1\", \n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"clients\": {\n    \"def\": {\n      \"name\": \"Cl1\", \n      \"hotspots\": {\"abc\": {\"name\": \"HS1\"}},\n      \"peerWorkers\": {\"ghi\": {\"name\": \"PW1\"}},\n      \"contacts\": {\"jkl\": {\"name\": \"Co1\"}}\n    }\n  },\n  \"peerWorkers\": {\n    \"ghi\": {\n      \"name\": \"PW1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"contacts\": {\n    \"jkl\": {\n      \"name\": \"Co1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  }\n}\n*/\n\n/**\n * Create mapping between different TEIs from each program\n * @returns {object} Object detailing relationships between each TEI by program\n */\n async function makeRelationshipMap() {\n  const prgUidNameMap = reverseObj(GLOBAL.programs)\n  const teisByPrg = await getTeisByProgram()\n  const teiUidNameMap = getTeiUidNameMap(teisByPrg)\n  const teiMap = {}\n  for (const prgName in GLOBAL.programs) {\n    teiMap[prgName] = {}\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      const teiUid = tei.trackedEntityInstance\n      const teiInfo = { name: teiUidNameMap[teiUid] }\n      for (const rel of tei.relationships) {\n        const programs = GLOBAL.relationTypeToPrograms[rel.relationshipType]\n        const otherProgram = programs.filter(\n          (thisPrgUid) => thisPrgUid !== prgUid\n        )[0]\n        const otherPrgName = prgUidNameMap[otherProgram]\n        const relTeis = [\n          rel.from.trackedEntityInstance.trackedEntityInstance,\n          rel.to.trackedEntityInstance.trackedEntityInstance,\n        ]\n        const otherTeiUid = relTeis.filter(\n          (thisTeiUid) => thisTeiUid !== teiUid\n        )[0]\n        if (!(otherPrgName in teiInfo)) {\n          teiInfo[otherPrgName] = {}\n        }\n        teiInfo[otherPrgName][otherTeiUid] = {\n          name: teiUidNameMap[otherTeiUid],\n        }\n      }\n      teiMap[prgName][teiUid] = teiInfo\n    }\n  }\n  return teiMap\n}\n\n// - - - - - - - - - - - - - //\n/* --- General Utilities --- */\n// - - - - - - - - - - - - - //\n\n/**\n * Return the id for the root org unit in the system\n * @returns {string}: String for the root OU in the system\n */\nasync function getRootOU() {\n  const params = {\n    fields: 'id',\n    filter: 'level:eq:1',\n  }\n  const resp = await getUtil('organisationUnits', params)\n  const data = await resp.json()\n  const rootOu = data.organisationUnits\n  if (rootOu.length === 1) {\n    return rootOu[0].id\n  } else {\n    throw `Found ${rootOu.length} root OUs, need only 1 root OU to continue`\n  }\n}\n\n/**\n * Returns a promise which resolves to the requested data\n * @param {string} endpoint DHIS2 endpoint to reqest to\n * @param {object} params Parameters for request\n * @returns {Promise} Which resolves to the requested data\n */\nfunction getUtil(endpoint, params, toJson = false) {\n  const paramStr = formatParams(params)\n  const reqUrl = `/api/${endpoint}?${paramStr}`\n  if (toJson) {\n    return fetch(reqUrl).then((resp) => {\n      return resp.json()\n    })\n  } else {\n    return fetch(reqUrl)\n  }\n}\n\n/**\n * Process a key: value params object and return a params url string\n * @param {object} params: An object with keys and strings or string arrays to format\n * @returns {String}: A string with the keys and values formatted for an api request\n */\nconst formatParams = (params) => {\n  const paramsArr = []\n  for (key in params) {\n    if (params.hasOwnProperty(key)) {\n      if (Array.isArray(params[key])) {\n        for (const value of params[key]) {\n          paramsArr.push(`${key}=${value}`)\n        }\n      } else {\n        paramsArr.push(`${key}=${params[key]}`)\n      }\n    }\n  }\n  return paramsArr.join('&')\n}\n\n/**\n * Take a flat array and transorm into an array or arrays with each inner array containing\n * chunkSize elements from the original array\n * @param {Array} arr Array to chunk\n * @param {Int} chunkSize Size of each chunk\n */\nfunction chunkArray(arr, chunkSize) {\n  const result = []\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    result.push(arr.slice(i, i + chunkSize))\n  }\n  return result\n}\n\n/**\n *\n * @param {string} endpoint DHIS2 endpoint to get data from\n * @param {Int} pageSize Integer for number of results per page\n * @param {Array} uids Array of UIDs to search for\n * @param {obj} params Object containing query params\n */\n async function getByUidsPaged(endpoint, pageSize, uids, params) {\n  const uidChunks = chunkArray(uids, pageSize || params.pageSize || 50)\n  params = params || {}\n  const promises = []\n  for (const uidChunk of uidChunks) {\n    params.trackedEntityInstance = uidChunk.join(';')\n    promises.push(\n      getUtil(endpoint, params).then((resp) => {\n        return resp.json()\n      })\n    )\n  }\n  const allTeis = await Promise.all(promises)\n  const result = []\n  for (const teisPage of allTeis) {\n    result.push(...teisPage.trackedEntityInstances)\n  }\n  return result\n}\n\n/**\n * Return the most recent value for the specified data element for the given TEI\n * most recent is determined using the event dates\n * @param {object} tei DHIS2 tracked entity instance\n * @param {string} deUid DHIS2 data element uid\n */\n function getMostRecentDataValue(evs, deUid) {\n  let dv = null\n  for (const ev of evs) {\n    const evDataValue = getDataValue(ev.dataValues, deUid)\n    dv = !!evDataValue ? evDataValue : dv\n  }\n  return dv\n}\n\n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function (event) {\n  if (!event.target.matches('.dropdown-btn')) {\n    $('.dropdown-content').removeClass('show')\n  }\n}\n\n/**\n * Given a metadata item, create an opbect to map the option codes to names\n * @param {object} metaItem Metadata item such as a data element or TEA whcih has as option set\n * @returns {object} Object to map the option codes to names\n */\nfunction getOsMap(metaItem) {\n  const osMap = {}\n  for (const opt of metaItem.optionSet.options) {\n    osMap[opt.code] = opt.name\n  }\n  return osMap\n}\n\n/**\n * Given a object with a list of de and tea UIDs, return a map for each, which maps codes to values\n * this is needed so the values in the report use the option names rather than the option codes\n * @param {object} deTeaArr Object with structure {dataElements: [], trackedEntityAttributes: []}\n */\n async function getOptionCodeNameMapping(deTeaUids) {\n  const { dataElements, trackedEntityAttributes } = deTeaUids\n  result = {}\n  const params = {\n    fields: 'id,name,optionSet(options(name,code))',\n    filter: `id:in:[${dataElements.join(',')}]`,\n  }\n  const deOpts = await getUtil('dataElements', params, true)\n  for (const de of deOpts.dataElements) {\n    result[de.id] = getOsMap(de)\n  }\n  params.filter = `id:in:[${trackedEntityAttributes.join(',')}]`\n  const teaOpts = await getUtil('trackedEntityAttributes', params, true)\n  for (const tea of teaOpts.trackedEntityAttributes) {\n    result[tea.id] = getOsMap(tea)\n  }\n  return result\n}\n\n/**\n * Add a dropdown menu under the specified parent element\n * @param {string} parentId Id of parent element which dropdown will be placed in\n * @param {string} id Id of dropdown element so it can be selected later\n * @param {string} text Text to appear on the dropdown\n * @param {array[{name, value}]} options Options for appear in the dropdown\n */\n function addDropdown(parentId, id, text, options, onSelect) {\n  const optionsHtml = options.map(\n    ({ name, value }) => `<a id=\"${value}\" class=\"${id}-option\">${name}</a>`\n  )\n  const dropdownHtml = `\n    <div class=\"dropdown\">\n      <button id=\"${id}\" class=\"dropdown-btn\">${text}</button>\n      <div id=\"dropdown-${id}\" class=\"dropdown-content\">\n        ${optionsHtml.join('')}\n      </div>\n    </div>\n  `\n  $(`#${parentId}`).append(dropdownHtml)\n  $(`#${id}`).on('click', () => {\n    $(`#dropdown-${id}`).toggleClass('show')\n  })\n  $(`.${id}-option`).on('click', function () {\n    const { name, value } = { name: $(this).text(), value: $(this).attr('id') }\n    $(`#${id}`).text(name)\n    $(`#${id}`).attr('option-id', value)\n    onSelect(name, value)\n    $(`#dropdown-${id}`).removeClass('show')\n  })\n}\n\n\nconst peerWorkerTet = 'eXep8PFvTd4'\nconst peerWorkerSelectText = 'Select peer worker'\nconst teas = {\n  firstName: 'otereslUoZH',\n  lastName: 'EoUadudZhJK',\n  phoneNumber: 'UR2hsxbNnoz',\n  relationship: 'YqWTTwealpY',\n  pnsApproach: 'AHXoMchNVpi',\n}\nconst des = {\n  contactOutcome: 'HTgmoABgDH1',\n}\nconst clientNumber = 'rqaCy1kmwRl'\nvar relationshipMap\nvar optionCodeNameMap\n\n$(() => {\n  main()\n})\n\n/**\n * Get system relationships and add dropdowns to select peer worker\n */\nasync function main() {\n  $('.container', parent.document).css({\n    width: '85rem',\n    'margin-right': 'auto',\n    'margin-left': 'auto',\n  }) // Set report width and center\n  const selectedOU = dhis2.report.organisationUnit.id\n  relationshipMap = await makeRelationshipMap()\n  console.log('Relationship map', relationshipMap)\n  optionCodeNameMap = await getOptionCodeNameMapping({\n    dataElements: [des.contactOutcome],\n    trackedEntityAttributes: [teas.pnsApproach, teas.relationship],\n  })\n  const peerWorkerOptions = await getPeerWorkersByOU(selectedOU)\n  addDropdown(\n    'peerworker-select',\n    'peerworker-dropdown',\n    peerWorkerSelectText,\n    peerWorkerOptions,\n    updateTable\n  )\n  $('#report-content').show()\n  $('#loader').hide()\n}\n\n/**\n * Return all peer workers under the specified OU\n * @param {ouUid} ouUid DHIS2 uid for an organisation unit\n * @returns {Array} An array of DHIS TEI objects (peer workers)\n */\nasync function getPeerWorkersByOU(ouUid) {\n  const params = {\n    ou: ouUid,\n    ouMode: 'DESCENDANTS',\n    trackedEntityType: peerWorkerTet,\n  }\n  const pwData = await getUtil('trackedEntityInstances', params, true)\n  return pwData.trackedEntityInstances.map((tei) => ({\n    value: tei.trackedEntityInstance,\n    name: relationshipMap.peerWorkers[tei.trackedEntityInstance].name,\n  }))\n}\n\n/**\n * When the peer worker is updated, get the new data and render it\n * @param {string} periodName DHIS2 period format YYYYQN\n * @param {string} hotspotUid UID of hotspot TEI\n */\nasync function updateTable(peerWorkerName, peerWorkerUid) {\n  $('#report-content').empty()\n  const tableData = await getTableData(peerWorkerName, peerWorkerUid)\n  if (tableData.length === 0) {\n    $('#report-content').append(\n      '<div class=\"no-data\"><i>No clients found for the selected peer worker</i></div>'\n    )\n  } else {\n    renderTable(tableData)\n  }\n}\n\n/**\n * getTableData return structure:\n *  {\n *    clientUid1: {\n *      name: 'Example Name1',\n *      number: 01234567890,\n *      contactData: [{contactInfo1}, {contactInfo2}...]\n *    },\n *    clientUid2: {\n *      name: 'Example Name2',\n *      number: 09876543210,\n *      contactData: [{contactInfo1}, {contactInfo2}...]\n *    },\n *    ...\n *  }\n *\n */\n\n/**\n * Given a peer worker, get the relevant client and contact data via relationships\n * @param {string} periodName DHIS2 period format YYYYQN\n * @param {string} hotspotUid UID of hotspot TEI\n * @returns {Object} Object with clients as the primary key and contact data for the values\n */\nasync function getTableData(peerWorkerName, peerWorkerUid) {\n  const pw = relationshipMap.peerWorkers[peerWorkerUid]\n  if (!('clients' in pw)) return []\n  const clientUids = Object.keys(pw.clients)\n  const results = {}\n  const params = {\n    program: GLOBAL.programs.clients,\n    fields: 'trackedEntityInstance,attributes(attribute,value)',\n  }\n  const clients = await getByUidsPaged(\n    'trackedEntityInstances',\n    50,\n    clientUids,\n    params\n  )\n  for (const client of clients) {\n    const clUid = client.trackedEntityInstance\n    if (!(clUid in relationshipMap.clients)) {\n      // This means the client is not enrolled in the program\n      return []\n    }\n    const clientFromMap = relationshipMap.clients[clUid]\n    const clientResult = {\n      name: clientFromMap.name,\n      number: getAttrValue(client.attributes, clientNumber),\n      contactData: [],\n    }\n    if (!('contacts' in clientFromMap)) {\n      results[clUid] = clientResult\n      continue\n    }\n    const contactUids = Object.keys(clientFromMap.contacts)\n    const params = {\n      program: GLOBAL.programs.contacts,\n      fields: '*',\n    }\n    const contacts = await getByUidsPaged(\n      'trackedEntityInstances',\n      50,\n      contactUids,\n      params\n    )\n    for (const contact of contacts) {\n      const contactData = getAttrValues(contact.attributes, teas)\n      const evs = teiEvs(contact)\n      contactData.lastContactOutcome =\n        optionCodeNameMap[des.contactOutcome][\n          getMostRecentDataValue(evs, des.contactOutcome)\n        ]\n      clientResult.contactData.push(contactData)\n    }\n    results[clUid] = clientResult\n  }\n  return results\n}\n\n/**\n *\n * @param {Array} attributes Array of DHIS2 attributes\n * @param {Object} teas Object of TEA name and uids\n * @returns {Object} Map from TEA name to value\n */\nfunction getAttrValues(attributes, teas) {\n  const result = {}\n  for (const tea in teas) {\n    const teaUid = teas[tea]\n    if (teaUid in optionCodeNameMap) {\n      result[tea] = optionCodeNameMap[teaUid][getAttrValue(attributes, teaUid)]\n    } else {\n      result[tea] = getAttrValue(attributes, teaUid)\n    }\n  }\n  return result\n}\n\n/**\n * Given a TEI, return the events from their first enrollment (if any)\n * @param {Object} tei DHIS2 TEI\n * @returns {Array} Array of sorted events\n */\nfunction teiEvs(tei) {\n  const teiUid = tei.trackedEntityInstance\n  const enrols = tei.enrollments.length\n  if (enrols === 0) {\n    return []\n  } else if (enrols > 1) {\n    console.warn(\n      `TEI ${teiUid} has more than one enrollment, using first ${tei.enrollments[0].enrollment}`\n    )\n  }\n  const evs = tei.enrollments[0].events\n  if (evs.length < 1) {\n    return []\n  }\n  return evs.sort((ev1, ev2) => (ev1.eventDate > ev2.eventDate ? 1 : -1))\n}\n\n/**\n * Create HTML to render the given value\n * @param {any} val A value to be placed in the table cell\n * @returns {string} HTML string for table cell element\n */\nfunction td(val) {\n  return `<td>${val === null || val === undefined ? '' : val}</td>`\n}\n\n/**\n * Take array of data and map it to the correct columns in the table\n * @param {Array} tableData Array of data to be rendered\n */\nfunction renderTable(tableData) {\n  for (const clientUid in tableData) {\n    const { name, number, contactData } = tableData[clientUid]\n    const nameText = `Client name: ${!!name ? name : ''}`\n    const numberText = `Client number: ${!!number ? number : ''}`\n    const $clientTable = $('#table-template').clone()\n    $clientTable.attr('id', `client-${clientUid}`)\n    $clientTable.find('.kp-name').text(nameText)\n    $clientTable.find('.kp-number').text(numberText)\n    const $tbody = $clientTable.find('tbody')\n    for (const contact of contactData) {\n      const {\n        firstName,\n        lastName,\n        phoneNumber,\n        relationship,\n        pnsApproach,\n        lastContactOutcome,\n      } = contact\n      $tbody.append(\n        `\n          <tr>\n             ${td(firstName)}\n             ${td(lastName)}\n             ${td(phoneNumber)}\n             ${td(relationship)}\n             ${td(pnsApproach)}\n             ${td(lastContactOutcome)}\n          </tr>\n        `\n      )\n    }\n    if (contactData.length === 0) {\n      $tbody.append(\n        `<tr><td colspan=\"6\" class=\"no-data\"><p><i>No contacts found for this client</i></p></td></tr>`\n      )\n    }\n    $('#report-content').append($clientTable)\n  }\n}\n</script>",
      "publicAccess": "rw------",
      "type": "HTML",
      "externalAccess": false,
      "cacheStrategy": "NO_CACHE",
      "lastUpdatedBy": {
        "id": "M5zQapPyTZI"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "reportParams": {
        "paramGrandParentOrganisationUnit": false,
        "paramReportingPeriod": false,
        "paramOrganisationUnit": true,
        "paramParentOrganisationUnit": false
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "userGroupAccesses": [],
      "translations": [],
      "userAccesses": []
    },
    {
      "created": "2021-01-12T09:59:04.361",
      "lastUpdated": "2021-01-12T09:59:04.361",
      "name": "Peer worker by hotspot",
      "id": "sGuUTAlSKBo",
      "designContent": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Peer worker info by hotspot</title>\n    <style>body {\n  font-family: 'Roboto', sans-serif;\n}\n.center-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n#report-title {\n  font-weight: 400;\n}\n.data-table {\n  border-collapse: collapse;\n  width: 100%;\n  margin-bottom: 50px;\n}\n.data-table td,\n.data-table th {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n.data-table th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  background-color: #1a6794;\n  color: white;\n}\n.data-table tr:nth-child(even) {\n  background-color: #f2faff;\n}\n.data-table td:nth-child(n + 2) {\n  text-align: center;\n}\n\n.center-text {\n  text-align: center;\n}\n\n.small-font {\n  font-size: 0.9em;\n}\n\n.no-data {\n  text-align: center;\n}\n\n#loader {\n  margin-top: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.loader {\n  border: 4px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 4px solid #3498db;\n  width: 30px;\n  height: 30px;\n  animation: spin 1s linear infinite;\n}\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.loading-text {\n  margin-left: 10px;\n}\n\n.report-header {\n  padding-bottom: 15px;\n}\n\n.flex {\n  display: flex;\n}\n\n.custom-select {\n  padding: 0 30px;\n}\n\n.dropdown-btn {\n  background-color: #3498db;\n  color: white;\n  padding: 16px;\n  font-size: 16px;\n  border: none;\n  cursor: pointer;\n  width: 200px;\n}\n\n.dropdown-btn:hover,\n.dropdown-btn:focus {\n  background-color: #2980b9;\n}\n\n.dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  background-color: #f1f1f1;\n  min-width: 160px;\n  width: 100%;\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n}\n\n.dropdown-content a {\n  color: black;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block;\n  overflow: auto;\n}\n.dropdown-content a:hover {\n  background-color: #ddd;\n}\n\n.show {\n  display: block;\n}\n</style>\n  </head>\n  <body>\n    <div>\n      <div class=\"center-content report-header\">\n        <h1 id=\"report-title\">Peer worker info by hotspot</h1>\n        <span id=\"user-selections\" class=\"flex\">\n          <div\n            id=\"period-select\"\n            class=\"custom-select\"\n            style=\"display: none\"\n          ></div>\n          <div id=\"hotspot-select\" class=\"custom-select\"></div>\n        </span>\n      </div>\n      <div id=\"report-content\" style=\"display: none\">\n        <table class=\"data-table\">\n          <thead>\n            <tr>\n              <th>Peer Worker</th>\n              <th>Status</th>\n              <th>Type</th>\n              <th>Date of most recent event</th>\n            </tr>\n          </thead>\n          <tbody></tbody>\n        </table>\n      </div>\n    </div>\n    <span id=\"loader\">\n      <div class=\"loader\"></div>\n      <div class=\"loading-text\">Loading tracked entity instances...</div>\n    </span>\n  </body>\n</html>\n<script> const GLOBAL = {\n  programs: {\n    hotspots: 'TljZtip0OB2',\n    clients: 'xrwtYQH5ZLa',\n    peerWorkers: 'VlhhDEete7p',\n    contacts: 'yoyUtVn5Gop',\n  },\n  names: {\n    TljZtip0OB2: ['garBktaoHJs'],\n    xrwtYQH5ZLa: ['otereslUoZH', 'EoUadudZhJK'],\n    VlhhDEete7p: ['otereslUoZH', 'EoUadudZhJK'],\n    yoyUtVn5Gop: ['otereslUoZH', 'EoUadudZhJK'],\n  },\n  relationTypeToPrograms: {\n    Fu2r3tVR5PL: ['TljZtip0OB2', 'xrwtYQH5ZLa'],\n    PlgvrJqKITC: ['VlhhDEete7p', 'xrwtYQH5ZLa'],\n    YWSVH34f3AB: ['yoyUtVn5Gop', 'xrwtYQH5ZLa'],\n  },\n}\n\n/**\n * Swap keys and values on an object (only works for literal values)\n * @param obj {object}: Object with depth 1 and literal values\n * @returns {object}: With keys and values swapped\n */\nfunction reverseObj(obj) {\n  const result = {}\n  Object.keys(obj).map((key) => (result[obj[key]] = key))\n  return result\n}\n\n/**\n * Get attribute value from TEI attributes\n * @param attributes {array}: Array of attributes on the TEI\n * @param attributeUid {string}: Attribute uid to look for\n * @returns {string || undefined}: Value for specified attribute\n */\nconst getAttrValue = (attributes, attributeUid) => {\n  const filteredAttributes = attributes.filter(\n    (attr) => attr.attribute === attributeUid\n  )\n  if (filteredAttributes.length === 1) {\n    return filteredAttributes[0].value\n  } else if (filteredAttributes.length > 1) {\n    throw new Error(`More than one value found for ${attributeUid}`)\n  } else {\n    return null\n  }\n}\n\n/**\n * Get the value associated with a given data element if it exists in the given data values\n * @param {Array} dvs Array of DHIS2 data values\n * @param {string} deUid DHIS2 data element UID\n */\nfunction getDataValue(dvs, deUid) {\n  const filteredDvs = dvs.filter((dv) => dv.dataElement === deUid)\n  if (filteredDvs.length === 1) {\n    return filteredDvs[0].value\n  } else if (filteredDvs.length > 1) {\n    throw new Error(`More than one value found for ${deUid}`)\n  } else {\n    return null\n  }\n}\n\n/**\n * Get all data for all TEIs in the specified program(s)\n * @param programUids {string}: String for a DHIS2 program UID\n * @returns {array}: Array of DHIS2 TEI objects\n */\nasync function getTeis(programUid, orgUnit) {\n  const params = {\n    program: programUid,\n    ou: orgUnit || (await getRootOU()),\n    ouMode: 'DESCENDANTS',\n    fields:\n      'trackedEntityInstance,attributes,relationships(relationshipType,from,to),enrollments(program,orgUnit)',\n  }\n  const resp = await getUtil('trackedEntityInstances', params)\n  const data = await resp.json()\n  return data['trackedEntityInstances']\n}\n\n/**\n * Search for the TEI name from the attributes, where attribute needed depends on the program\n * @param prgUid {string}: DHIS2 program uid\n * @param attributes {object}: DHIS2 TEI attributes\n * @returns {string}: TEI name identifier from attributes\n */\nfunction getTeiName(prgUid, attributes) {\n  const nameFields = GLOBAL.names[prgUid]\n  let name = []\n  for (const attrUid of nameFields) {\n    const attrVal = getAttrValue(attributes, attrUid)\n    if (!!attrVal) {\n      name.push(attrVal)\n    }\n  }\n  return name.join(' ')\n}\n\n/**\n * Get all TEIs in the system, by program\n * @returns {object}: Object with program names as keys and array values with\n *                    the teis for that program\n */\nasync function getTeisByProgram() {\n  const teisByPrg = {}\n  const rootOU = await getRootOU()\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = await getTeis(prgUid, rootOU)\n    teisByPrg[prgName] = teis\n  }\n  return teisByPrg\n}\n\n/**\n * Create a map from teiUid to teiName\n * @param {object} teisByPrg: Object with program names as keys and array values with\n *                            the teis for that program\n * @returns {object}: Map from tei uid to tei name\n */\nfunction getTeiUidNameMap(teisByPrg) {\n  const teiNameMap = {}\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      teiNameMap[tei.trackedEntityInstance] =\n        getTeiName(prgUid, tei.attributes) || ''\n    }\n  }\n  return teiNameMap\n}\n\n/* EXAMPLE relationship map structure\n{\n  \"hotspots\": {\n    \"abc\": {\n      \"name\": \"HS1\", \n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"clients\": {\n    \"def\": {\n      \"name\": \"Cl1\", \n      \"hotspots\": {\"abc\": {\"name\": \"HS1\"}},\n      \"peerWorkers\": {\"ghi\": {\"name\": \"PW1\"}},\n      \"contacts\": {\"jkl\": {\"name\": \"Co1\"}}\n    }\n  },\n  \"peerWorkers\": {\n    \"ghi\": {\n      \"name\": \"PW1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"contacts\": {\n    \"jkl\": {\n      \"name\": \"Co1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  }\n}\n*/\n\n/**\n * Create mapping between different TEIs from each program\n * @returns {object} Object detailing relationships between each TEI by program\n */\n async function makeRelationshipMap() {\n  const prgUidNameMap = reverseObj(GLOBAL.programs)\n  const teisByPrg = await getTeisByProgram()\n  const teiUidNameMap = getTeiUidNameMap(teisByPrg)\n  const teiMap = {}\n  for (const prgName in GLOBAL.programs) {\n    teiMap[prgName] = {}\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      const teiUid = tei.trackedEntityInstance\n      const teiInfo = {\n        name: teiUidNameMap[teiUid],\n        orgUnit: tei.enrollments.length ? tei.enrollments[0].orgUnit : null,\n      }\n      for (const rel of tei.relationships) {\n        const programs = GLOBAL.relationTypeToPrograms[rel.relationshipType]\n        const otherProgram = programs.filter(\n          (thisPrgUid) => thisPrgUid !== prgUid\n        )[0]\n        const otherPrgName = prgUidNameMap[otherProgram]\n        const relTeis = [\n          rel.from.trackedEntityInstance.trackedEntityInstance,\n          rel.to.trackedEntityInstance.trackedEntityInstance,\n        ]\n        const otherTeiUid = relTeis.filter(\n          (thisTeiUid) => thisTeiUid !== teiUid\n        )[0]\n        if (!(otherPrgName in teiInfo)) {\n          teiInfo[otherPrgName] = {}\n        }\n        teiInfo[otherPrgName][otherTeiUid] = {\n          name: teiUidNameMap[otherTeiUid],\n        }\n      }\n      teiMap[prgName][teiUid] = teiInfo\n    }\n  }\n  return teiMap\n}\n\n// - - - - - - - - - - - - - //\n/* --- General Utilities --- */\n// - - - - - - - - - - - - - //\n\n/**\n * Return the id for the root org unit in the system\n * @returns {string}: String for the root OU in the system\n */\nasync function getRootOU() {\n  const params = {\n    fields: 'id',\n    filter: 'level:eq:1',\n  }\n  const resp = await getUtil('organisationUnits', params)\n  const data = await resp.json()\n  const rootOu = data.organisationUnits\n  if (rootOu.length === 1) {\n    return rootOu[0].id\n  } else {\n    throw `Found ${rootOu.length} root OUs, need only 1 root OU to continue`\n  }\n}\n\n/**\n * Returns a promise which resolves to the requested data\n * @param {string} endpoint DHIS2 endpoint to reqest to\n * @param {object} params Parameters for request\n * @returns {Promise} Which resolves to the requested data\n */\nfunction getUtil(endpoint, params, toJson = false) {\n  const paramStr = formatParams(params)\n  const reqUrl = `/api/${endpoint}?${paramStr}`\n  if (toJson) {\n    return fetch(reqUrl).then((resp) => {\n      return resp.json()\n    })\n  } else {\n    return fetch(reqUrl)\n  }\n}\n\n/**\n * Process a key: value params object and return a params url string\n * @param {object} params: An object with keys and strings or string arrays to format\n * @returns {String}: A string with the keys and values formatted for an api request\n */\nconst formatParams = (params) => {\n  const paramsArr = []\n  for (key in params) {\n    if (params.hasOwnProperty(key)) {\n      if (Array.isArray(params[key])) {\n        for (const value of params[key]) {\n          paramsArr.push(`${key}=${value}`)\n        }\n      } else {\n        paramsArr.push(`${key}=${params[key]}`)\n      }\n    }\n  }\n  return paramsArr.join('&')\n}\n\n/**\n * Take a flat array and transorm into an array or arrays with each inner array containing\n * chunkSize elements from the original array\n * @param {Array} arr Array to chunk\n * @param {Int} chunkSize Size of each chunk\n */\nfunction chunkArray(arr, chunkSize) {\n  const result = []\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    result.push(arr.slice(i, i + chunkSize))\n  }\n  return result\n}\n\n/**\n *\n * @param {string} endpoint DHIS2 endpoint to get data from\n * @param {Int} pageSize Integer for number of results per page\n * @param {Array} uids Array of UIDs to search for\n * @param {obj} params Object containing query params\n */\n async function getByUidsPaged(endpoint, pageSize, uids, params) {\n  const uidChunks = chunkArray(uids, pageSize || params.pageSize || 50)\n  const uidQueryParam = endpoint.slice(0, endpoint.length - 1)\n  params = params || {}\n  const promises = []\n  for (const uidChunk of uidChunks) {\n    params[uidQueryParam] = uidChunk.join(';')\n    promises.push(\n      getUtil(endpoint, params).then((resp) => {\n        return resp.json()\n      })\n    )\n  }\n  const allData = await Promise.all(promises)\n  const result = []\n  for (const page of allData) {\n    result.push(...page[endpoint])\n  }\n  return result\n}\n\n/**\n * Return the most recent value for the specified data element for the given TEI\n * most recent is determined using the event dates\n * @param {object} tei DHIS2 tracked entity instance\n * @param {string} deUid DHIS2 data element uid\n */\n function getMostRecentDataValue(evs, deUid) {\n  let dv = null\n  for (const ev of evs) {\n    const evDataValue = getDataValue(ev.dataValues, deUid)\n    dv = !!evDataValue ? evDataValue : dv\n  }\n  return dv\n}\n\n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function (event) {\n  if (!event.target.matches('.dropdown-btn')) {\n    $('.dropdown-content').removeClass('show')\n  }\n}\n\n/**\n * Given a metadata item, create an opbect to map the option codes to names\n * @param {object} metaItem Metadata item such as a data element or TEA whcih has as option set\n * @returns {object} Object to map the option codes to names\n */\nfunction getOsMap(metaItem) {\n  const osMap = {}\n  for (const opt of metaItem.optionSet.options) {\n    osMap[opt.code] = opt.name\n  }\n  return osMap\n}\n\n/**\n * Given a object with a list of de and tea UIDs, return a map for each, which maps codes to values\n * this is needed so the values in the report use the option names rather than the option codes\n * @param {object} deTeaArr Object with structure {dataElements: [], trackedEntityAttributes: []}\n */\n async function getOptionCodeNameMapping(deTeaUids) {\n  const { dataElements, trackedEntityAttributes } = deTeaUids\n  result = {}\n  const params = {\n    fields: 'id,name,optionSet(options(name,code))',\n    filter: `id:in:[${dataElements.join(',')}]`,\n  }\n  const deOpts = await getUtil('dataElements', params, true)\n  for (const de of deOpts.dataElements) {\n    result[de.id] = getOsMap(de)\n  }\n  params.filter = `id:in:[${trackedEntityAttributes.join(',')}]`\n  const teaOpts = await getUtil('trackedEntityAttributes', params, true)\n  for (const tea of teaOpts.trackedEntityAttributes) {\n    result[tea.id] = getOsMap(tea)\n  }\n  return result\n}\n\n/**\n * Add a dropdown menu under the specified parent element\n * @param {string} parentId Id of parent element which dropdown will be placed in\n * @param {string} id Id of dropdown element so it can be selected later\n * @param {string} text Text to appear on the dropdown\n * @param {array[{name, value}]} options Options for appear in the dropdown\n */\n function addDropdown(parentId, id, text, options, onSelect) {\n  const optionsHtml = options.map(\n    ({ name, value }) => `<a id=\"${value}\" class=\"${id}-option\">${name}</a>`\n  )\n  const dropdownHtml = `\n    <div class=\"dropdown\">\n      <button id=\"${id}\" class=\"dropdown-btn\">${text}</button>\n      <div id=\"dropdown-${id}\" class=\"dropdown-content\">\n        ${optionsHtml.join('')}\n      </div>\n    </div>\n  `\n  $(`#${parentId}`).append(dropdownHtml)\n  $(`#${id}`).on('click', () => {\n    $(`#dropdown-${id}`).toggleClass('show')\n  })\n  $(`.${id}-option`).on('click', function () {\n    const { name, value } = { name: $(this).text(), value: $(this).attr('id') }\n    $(`#${id}`).text(name)\n    $(`#${id}`).attr('option-id', value)\n    onSelect(name, value)\n    $(`#dropdown-${id}`).removeClass('show')\n  })\n}\n\n/**\n * Create HTML to render the given value\n * @param {any} val A value to be placed in the table cell\n * @returns {string} HTML string for table cell element\n */\nfunction td(val) {\n  return `<td>${val === null || val === undefined ? '' : val}</td>`\n}\n\n\n// const hotspotSelectText = 'Select Hotspot'\n// const periodSelectText = 'Select period'\nconst pwTypeTeaUid = 'HpdEWgybpCQ'\nconst pwStatusDeUid = 'SG7R77U6TYH'\nvar relationshipMap\nvar optionCodeNameMap\n\n$(() => {\n  main()\n})\n\n/**\n * Get system relationships and add dropdowns to select quarter and hotspot\n */\nasync function main() {\n  relationshipMap = await makeRelationshipMap()\n  console.log(relationshipMap)\n  optionCodeNameMap = await getOptionCodeNameMapping({\n    dataElements: [pwStatusDeUid],\n    trackedEntityAttributes: [pwTypeTeaUid],\n  })\n  // const periodOptions = quartersOptions(3)\n  // const hotspotOptions = Object.keys(relationshipMap.hotspots).map(\n  //   (hotspotUid) => ({\n  //     name: relationshipMap.hotspots[hotspotUid].name,\n  //     value: hotspotUid,\n  //   })\n  // )\n  // addDropdown(\n  //   'period-select',\n  //   'period-dropdown',\n  //   periodSelectText,\n  //   periodOptions,\n  //   periodSelect\n  // )\n  // addDropdown(\n  //   'hotspot-select',\n  //   'hotspot-dropdown',\n  //   hotspotSelectText,\n  //   hotspotOptions,\n  //   hotspotSelect\n  // )\n  updateTable(null, null)\n  $('#report-content').show()\n  $('#loader').hide()\n}\n\n/**\n * Generate an array of period quarters in DHIS2 format YYYYQN\n * @param {Int} lastYears Last number of years to include quarters options for\n */\nfunction quartersOptions(lastYears) {\n  const d = new Date()\n  const m = Math.floor(d.getUTCMonth() / 3) + 1\n  const y = d.getUTCFullYear()\n  const yStart = y - lastYears\n  const result = []\n  for (let i = 0; i < lastYears * 4 + 1; i++) {\n    result.unshift(\n      `${yStart + Math.floor((m + i - 1) / 4)}Q${((m + i - 1) % 4) + 1}`\n    )\n  }\n  return result.map((quarter) => ({ name: quarter, value: quarter }))\n}\n\n/**\n * Update the table when a new period is selected (if there is also a hotspot selected)\n * @param {string} periodName DHIS2 period format YYYYQN\n * @param {string} periodUid Not needed for this function\n */\nfunction periodSelect(periodName, periodUid) {\n  const $hotspotField = $('#hotspot-dropdown')\n  const hotspotName = $hotspotField.text()\n  const hotspotUid = $hotspotField.attr('option-id')\n  if (hotspotName !== hotspotSelectText) {\n    console.log(\n      `Updating table from period select with periodName: ${periodName} and hotspotUid: ${hotspotUid}`\n    )\n    updateTable(periodName, hotspotUid)\n  }\n}\n\n/**\n * Update the table when a new hotspot is selected (if there is also a period selected)\n * @param {string} hotspotName Not needed for this function\n * @param {string} hotspotValue UID of hotspot TEI\n */\nfunction hotspotSelect(hotspotName, hotspotUid) {\n  updateTable(null, hotspotUid)\n}\n\n/**\n * When the period or hotspot are updated, get the new data and render it\n * @param {string} periodName DHIS2 period format YYYYQN\n * @param {string} hotspotUid UID of hotspot TEI\n */\nasync function updateTable(periodName, hotspotUid) {\n  console.log('Updating table')\n  const tableData = await getTableData(periodName, hotspotUid)\n  renderTable(tableData)\n}\n\n/**\n * Given a period and hotspot, get the relevant data via relationships\n * @param {string} periodName DHIS2 period format YYYYQN\n * @param {string} hotspotUid UID of hotspot TEI\n */\nasync function getTableData(periodName, hotspotUid) {\n  let peerWorkerUids\n  if (hotspotUid === null) {\n    const hotspotUids = await getHotspotsInOu()\n    console.log('Hotspot UIDs', hotspotUids)\n    peerWorkerUids = peerWorkersFromHotspots(relationshipMap, hotspotUids)\n  } else {\n    peerWorkerUids = peerWorkersFromHotspots(relationshipMap, [hotspotUid])\n  }\n  const params = {\n    program: GLOBAL.programs.peerWorkers,\n    fields: '*',\n  }\n  const result = []\n  console.log('peerWorkerUids', peerWorkerUids)\n  const peerWorkers = await getByUidsPaged(\n    'trackedEntityInstances',\n    50,\n    peerWorkerUids,\n    params\n  )\n  for (const pw of peerWorkers) {\n    const pwName = relationshipMap.peerWorkers[pw.trackedEntityInstance].name\n    const evs = teiEvsInPeriod(pw, periodName)\n    const pwStatus =\n      optionCodeNameMap[pwStatusDeUid][\n        getMostRecentDataValue(evs, pwStatusDeUid)\n      ]\n    const pwType =\n      optionCodeNameMap[pwTypeTeaUid][getAttrValue(pw.attributes, pwTypeTeaUid)]\n    const lastEvDate =\n      evs.length < 1 ? null : evs[evs.length - 1].eventDate.slice(0, 10)\n    result.push({\n      pwName,\n      pwStatus,\n      pwType,\n      lastEvDate,\n    })\n  }\n  return result\n}\n\nasync function getHotspotsInOu() {\n  console.log('getting HS by OU')\n  const params = {\n    ou: dhis2.report.organisationUnit.id,\n    ouMode: 'DESCENDANTS',\n    program: GLOBAL.programs.hotspots,\n    fields: 'trackedEntityInstance',\n    paging: 'false',\n  }\n  const data = await getUtil('trackedEntityInstances', params, true)\n  return data.trackedEntityInstances.map((tei) => tei.trackedEntityInstance)\n}\n\n/**\n * By looking via the hotpot-client and client-peer worker relationships find all peer workers\n * associsated with a hotspot\n * @param {obj} relationshipMap Object mapping different TEIs to one another from DHIS2 relationships\n * @param {string} hotspotUid UID of hotspot TEI\n */\nfunction peerWorkersFromHotspots(relationshipMap, hotspotUids) {\n  const peerWorkerUids = []\n  for (const hotspotUid of hotspotUids) {\n    console.log('Processing hotspot: ', hotspotUid)\n    const hotspot = relationshipMap.hotspots[hotspotUid]\n    if ('clients' in hotspot) {\n      for (const clientUid in hotspot.clients) {\n        const client = relationshipMap.clients[clientUid]\n        if ('peerWorkers' in client) {\n          peerWorkerUids.push(...Object.keys(client.peerWorkers))\n        }\n      }\n    }\n  }\n\n  return [...new Set(peerWorkerUids)]\n}\n\n/**\n * Get a TEIs events in the specified period and include appropriate logging if issues found.\n * Also sort events by eventDate\n * @param {obj} tei DHIS2 tracked entity instance\n */\nfunction teiEvsInPeriod(tei, evPeriodName) {\n  if (evPeriodName !== null) {\n    const { startDate, endDate } = dateRangeFromQuarter(evPeriodName)\n  }\n  const teiUid = tei.trackedEntityInstance\n  const enrols = tei.enrollments.length\n  if (enrols === 0) {\n    console.log(`TEI ${teiUid} has no enrollments`)\n    return null\n  } else if (enrols > 1) {\n    console.warn(\n      `TEI ${teiUid} has more than one enrollment, using first ${tei.enrollments[0].enrollment}`\n    )\n  }\n  let evs = tei.enrollments[0].events\n  if (evs.length < 1) {\n    return []\n  }\n  if (evPeriodName !== null) {\n    evs = evs.filter(\n      (ev) => ev.eventDate >= startDate && ev.eventDate <= endDate\n    )\n  }\n  const evsSorted = evs.sort((ev1, ev2) =>\n    ev1.eventDate > ev2.eventDate ? 1 : -1\n  )\n  return evsSorted\n}\n\n/**\n * Convert DHIS2 quarter period into start and end dates for filtering\n * @param {string} quarterName DHIS2 period format YYYYQN\n */\nfunction dateRangeFromQuarter(quarterName) {\n  if (/^\\d{4}Q\\d$/.test(quarterName)) {\n    const qMap = {\n      1: ['01-01', '03-31'],\n      2: ['04-01', '06-30'],\n      3: ['07-01', '09-20'],\n      4: ['10-01', '12-31'],\n    }\n    const year = parseInt(quarterName.slice(0, 4))\n    const quarter = parseInt(quarterName[5])\n    return {\n      startDate: `${year}-${qMap[quarter][0]}`,\n      endDate: `${year}-${qMap[quarter][1]}`,\n    }\n  } else {\n    throw new Error(\n      `Requested period ${quarterName} does not match expected pattern YYYYQN`\n    )\n  }\n}\n\n/**\n * Take array of data and map it to the correct columns in the table\n * @param {Array} tableData Array of data to be rendered\n */\nfunction renderTable(tableData) {\n  const $tbody = $('.data-table').children('tbody')\n  $tbody.empty()\n  for (const rowData of tableData) {\n    const { pwName, pwStatus, pwType, lastEvDate } = rowData\n    $tbody.append(\n      `\n      <tr>\n        <td>${pwName === null ? '' : pwName}</td>\n        <td>${pwStatus === null ? '' : pwStatus}</td>\n        <td>${pwType === null ? '' : pwType}</td>\n        <td>${lastEvDate === null ? '' : lastEvDate}</td>\n      </tr>\n      `\n    )\n  }\n  if (tableData.length === 0) {\n    $tbody.append(\n      `<tr><td colspan=\"4\" class=\"no-data\"><p><i>No data found for the selected period and hotspot</i></p></td></tr>`\n    )\n  }\n}\n</script>",
      "publicAccess": "rw------",
      "type": "HTML",
      "externalAccess": false,
      "cacheStrategy": "NO_CACHE",
      "lastUpdatedBy": {
        "id": "M5zQapPyTZI"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "reportParams": {
        "paramGrandParentOrganisationUnit": false,
        "paramReportingPeriod": false,
        "paramOrganisationUnit": true,
        "paramParentOrganisationUnit": false
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "userGroupAccesses": [],
      "translations": [],
      "userAccesses": []
    },
    {
      "created": "2021-01-11T09:59:53.096",
      "lastUpdated": "2021-01-12T09:41:58.049",
      "name": "Next appointment date",
      "id": "byCmtyPZMHU",
      "designContent": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Upcoming appointments</title>\n    <style>body {\n  font-family: 'Roboto', sans-serif;\n}\n.center-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n#report-title {\n  font-weight: 400;\n}\n.data-table {\n  border-collapse: collapse;\n  width: 100%;\n  margin-bottom: 50px;\n}\n.data-table td,\n.data-table th {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n.data-table th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  background-color: #1a6794;\n  color: white;\n}\n.data-table tr:nth-child(even) {\n  background-color: #f2faff;\n}\n.data-table td:nth-child(n + 2) {\n  text-align: center;\n}\n\n.center-text {\n  text-align: center;\n}\n\n.small-font {\n  font-size: 0.9em;\n}\n\n.no-data {\n  text-align: center;\n}\n\n#loader {\n  margin-top: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.loader {\n  border: 4px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 4px solid #3498db;\n  width: 30px;\n  height: 30px;\n  animation: spin 1s linear infinite;\n}\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.loading-text {\n  margin-left: 10px;\n}\n\n.report-header {\n  padding-bottom: 15px;\n}\n\n.flex {\n  display: flex;\n}\n\n.custom-select {\n  padding: 0 30px;\n}\n\n.dropdown-btn {\n  background-color: #3498db;\n  color: white;\n  padding: 16px;\n  font-size: 16px;\n  border: none;\n  cursor: pointer;\n  width: 200px;\n}\n\n.dropdown-btn:hover,\n.dropdown-btn:focus {\n  background-color: #2980b9;\n}\n\n.dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  background-color: #f1f1f1;\n  min-width: 160px;\n  width: 100%;\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n}\n\n.dropdown-content a {\n  color: black;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block;\n  overflow: auto;\n}\n.dropdown-content a:hover {\n  background-color: #ddd;\n}\n\n.show {\n  display: block;\n}\n</style>\n  </head>\n  <body>\n    <div>\n      <div class=\"center-content report-header\">\n        <h1 id=\"report-title\">Upcoming appointments</h1>\n        <span id=\"user-selections\" class=\"flex\">\n          <div id=\"period-select\" class=\"custom-select\"></div>\n        </span>\n      </div>\n      <div id=\"report-content\" style=\"display: none\">\n        <table class=\"data-table center-text\">\n          <thead>\n            <tr>\n              <th>First name</th>\n              <th>Last name</th>\n              <th>ART</th>\n              <th>HTS</th>\n              <th>VL</th>\n              <th>PReP</th>\n              <th>TPT</th>\n              <th>MAT</th>\n            </tr>\n          </thead>\n          <tbody></tbody>\n        </table>\n      </div>\n    </div>\n    <span id=\"loader\" style=\"display: none\">\n      <div class=\"loader\"></div>\n      <div class=\"loading-text\">Finding events in the selected week...</div>\n    </span>\n    <div id=\"select-week-text\" class=\"center-text\">\n      Please select a week to begin\n    </div>\n  </body>\n</html>\n<script> const GLOBAL = {\n  programs: {\n    hotspots: 'TljZtip0OB2',\n    clients: 'xrwtYQH5ZLa',\n    peerWorkers: 'VlhhDEete7p',\n    contacts: 'yoyUtVn5Gop',\n  },\n  names: {\n    TljZtip0OB2: ['garBktaoHJs'],\n    xrwtYQH5ZLa: ['otereslUoZH', 'EoUadudZhJK'],\n    VlhhDEete7p: ['otereslUoZH', 'EoUadudZhJK'],\n    yoyUtVn5Gop: ['otereslUoZH', 'EoUadudZhJK'],\n  },\n  relationTypeToPrograms: {\n    Fu2r3tVR5PL: ['TljZtip0OB2', 'xrwtYQH5ZLa'],\n    PlgvrJqKITC: ['VlhhDEete7p', 'xrwtYQH5ZLa'],\n    YWSVH34f3AB: ['yoyUtVn5Gop', 'xrwtYQH5ZLa'],\n  },\n}\n\n/**\n * Swap keys and values on an object (only works for literal values)\n * @param obj {object}: Object with depth 1 and literal values\n * @returns {object}: With keys and values swapped\n */\nfunction reverseObj(obj) {\n  const result = {}\n  Object.keys(obj).map((key) => (result[obj[key]] = key))\n  return result\n}\n\n/**\n * Get attribute value from TEI attributes\n * @param attributes {array}: Array of attributes on the TEI\n * @param attributeUid {string}: Attribute uid to look for\n * @returns {string || undefined}: Value for specified attribute\n */\nconst getAttrValue = (attributes, attributeUid) => {\n  const filteredAttributes = attributes.filter(\n    (attr) => attr.attribute === attributeUid\n  )\n  if (filteredAttributes.length === 1) {\n    return filteredAttributes[0].value\n  } else if (filteredAttributes.length > 1) {\n    throw new Error(`More than one value found for ${attributeUid}`)\n  } else {\n    return null\n  }\n}\n\n/**\n * Get the value associated with a given data element if it exists in the given data values\n * @param {Array} dvs Array of DHIS2 data values\n * @param {string} deUid DHIS2 data element UID\n */\nfunction getDataValue(dvs, deUid) {\n  const filteredDvs = dvs.filter((dv) => dv.dataElement === deUid)\n  if (filteredDvs.length === 1) {\n    return filteredDvs[0].value\n  } else if (filteredDvs.length > 1) {\n    throw new Error(`More than one value found for ${deUid}`)\n  } else {\n    return null\n  }\n}\n\n/**\n * Get all data for all TEIs in the specified program(s)\n * @param programUids {string}: String for a DHIS2 program UID\n * @returns {array}: Array of DHIS2 TEI objects\n */\nasync function getTeis(programUid, orgUnit) {\n  const params = {\n    program: programUid,\n    ou: orgUnit || (await getRootOU()),\n    ouMode: 'DESCENDANTS',\n    fields:\n      'trackedEntityInstance,attributes,relationships(relationshipType,from,to),enrollments(program)',\n  }\n  const resp = await getUtil('trackedEntityInstances', params)\n  const data = await resp.json()\n  return data['trackedEntityInstances']\n}\n\n/**\n * Search for the TEI name from the attributes, where attribute needed depends on the program\n * @param prgUid {string}: DHIS2 program uid\n * @param attributes {object}: DHIS2 TEI attributes\n * @returns {string}: TEI name identifier from attributes\n */\nfunction getTeiName(prgUid, attributes) {\n  const nameFields = GLOBAL.names[prgUid]\n  let name = []\n  for (const attrUid of nameFields) {\n    const attrVal = getAttrValue(attributes, attrUid)\n    if (!!attrVal) {\n      name.push(attrVal)\n    }\n  }\n  return name.join(' ')\n}\n\n/**\n * Get all TEIs in the system, by program\n * @returns {object}: Object with program names as keys and array values with\n *                    the teis for that program\n */\nasync function getTeisByProgram() {\n  const teisByPrg = {}\n  const rootOU = await getRootOU()\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = await getTeis(prgUid, rootOU)\n    teisByPrg[prgName] = teis\n  }\n  return teisByPrg\n}\n\n/**\n * Create a map from teiUid to teiName\n * @param {object} teisByPrg: Object with program names as keys and array values with\n *                            the teis for that program\n * @returns {object}: Map from tei uid to tei name\n */\nfunction getTeiUidNameMap(teisByPrg) {\n  const teiNameMap = {}\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      teiNameMap[tei.trackedEntityInstance] =\n        getTeiName(prgUid, tei.attributes) || ''\n    }\n  }\n  return teiNameMap\n}\n\n/* EXAMPLE relationship map structure\n{\n  \"hotspots\": {\n    \"abc\": {\n      \"name\": \"HS1\", \n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"clients\": {\n    \"def\": {\n      \"name\": \"Cl1\", \n      \"hotspots\": {\"abc\": {\"name\": \"HS1\"}},\n      \"peerWorkers\": {\"ghi\": {\"name\": \"PW1\"}},\n      \"contacts\": {\"jkl\": {\"name\": \"Co1\"}}\n    }\n  },\n  \"peerWorkers\": {\n    \"ghi\": {\n      \"name\": \"PW1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"contacts\": {\n    \"jkl\": {\n      \"name\": \"Co1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  }\n}\n*/\n\n/**\n * Create mapping between different TEIs from each program\n * @returns {object} Object detailing relationships between each TEI by program\n */\n async function makeRelationshipMap() {\n  const prgUidNameMap = reverseObj(GLOBAL.programs)\n  const teisByPrg = await getTeisByProgram()\n  const teiUidNameMap = getTeiUidNameMap(teisByPrg)\n  const teiMap = {}\n  for (const prgName in GLOBAL.programs) {\n    teiMap[prgName] = {}\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      const teiUid = tei.trackedEntityInstance\n      const teiInfo = { name: teiUidNameMap[teiUid] }\n      for (const rel of tei.relationships) {\n        const programs = GLOBAL.relationTypeToPrograms[rel.relationshipType]\n        const otherProgram = programs.filter(\n          (thisPrgUid) => thisPrgUid !== prgUid\n        )[0]\n        const otherPrgName = prgUidNameMap[otherProgram]\n        const relTeis = [\n          rel.from.trackedEntityInstance.trackedEntityInstance,\n          rel.to.trackedEntityInstance.trackedEntityInstance,\n        ]\n        const otherTeiUid = relTeis.filter(\n          (thisTeiUid) => thisTeiUid !== teiUid\n        )[0]\n        if (!(otherPrgName in teiInfo)) {\n          teiInfo[otherPrgName] = {}\n        }\n        teiInfo[otherPrgName][otherTeiUid] = {\n          name: teiUidNameMap[otherTeiUid],\n        }\n      }\n      teiMap[prgName][teiUid] = teiInfo\n    }\n  }\n  return teiMap\n}\n\n// - - - - - - - - - - - - - //\n/* --- General Utilities --- */\n// - - - - - - - - - - - - - //\n\n/**\n * Return the id for the root org unit in the system\n * @returns {string}: String for the root OU in the system\n */\nasync function getRootOU() {\n  const params = {\n    fields: 'id',\n    filter: 'level:eq:1',\n  }\n  const resp = await getUtil('organisationUnits', params)\n  const data = await resp.json()\n  const rootOu = data.organisationUnits\n  if (rootOu.length === 1) {\n    return rootOu[0].id\n  } else {\n    throw `Found ${rootOu.length} root OUs, need only 1 root OU to continue`\n  }\n}\n\n/**\n * Returns a promise which resolves to the requested data\n * @param {string} endpoint DHIS2 endpoint to reqest to\n * @param {object} params Parameters for request\n * @returns {Promise} Which resolves to the requested data\n */\nfunction getUtil(endpoint, params, toJson = false) {\n  const paramStr = formatParams(params)\n  const reqUrl = `/api/${endpoint}?${paramStr}`\n  if (toJson) {\n    return fetch(reqUrl).then((resp) => {\n      return resp.json()\n    })\n  } else {\n    return fetch(reqUrl)\n  }\n}\n\n/**\n * Process a key: value params object and return a params url string\n * @param {object} params: An object with keys and strings or string arrays to format\n * @returns {String}: A string with the keys and values formatted for an api request\n */\nconst formatParams = (params) => {\n  const paramsArr = []\n  for (key in params) {\n    if (params.hasOwnProperty(key)) {\n      if (Array.isArray(params[key])) {\n        for (const value of params[key]) {\n          paramsArr.push(`${key}=${value}`)\n        }\n      } else {\n        paramsArr.push(`${key}=${params[key]}`)\n      }\n    }\n  }\n  return paramsArr.join('&')\n}\n\n/**\n * Take a flat array and transorm into an array or arrays with each inner array containing\n * chunkSize elements from the original array\n * @param {Array} arr Array to chunk\n * @param {Int} chunkSize Size of each chunk\n */\nfunction chunkArray(arr, chunkSize) {\n  const result = []\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    result.push(arr.slice(i, i + chunkSize))\n  }\n  return result\n}\n\n/**\n *\n * @param {string} endpoint DHIS2 endpoint to get data from\n * @param {Int} pageSize Integer for number of results per page\n * @param {Array} uids Array of UIDs to search for\n * @param {obj} params Object containing query params\n */\n async function getByUidsPaged(endpoint, pageSize, uids, params) {\n  const uidChunks = chunkArray(uids, pageSize || params.pageSize || 50)\n  const uidQueryParam = endpoint.slice(0, endpoint.length - 1)\n  params = params || {}\n  const promises = []\n  for (const uidChunk of uidChunks) {\n    params[uidQueryParam] = uidChunk.join(';')\n    promises.push(\n      getUtil(endpoint, params).then((resp) => {\n        return resp.json()\n      })\n    )\n  }\n  const allData = await Promise.all(promises)\n  const result = []\n  for (const page of allData) {\n    result.push(...page[endpoint])\n  }\n  return result\n}\n\n/**\n * Return the most recent value for the specified data element for the given TEI\n * most recent is determined using the event dates\n * @param {object} tei DHIS2 tracked entity instance\n * @param {string} deUid DHIS2 data element uid\n */\n function getMostRecentDataValue(evs, deUid) {\n  let dv = null\n  for (const ev of evs) {\n    const evDataValue = getDataValue(ev.dataValues, deUid)\n    dv = !!evDataValue ? evDataValue : dv\n  }\n  return dv\n}\n\n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function (event) {\n  if (!event.target.matches('.dropdown-btn')) {\n    $('.dropdown-content').removeClass('show')\n  }\n}\n\n/**\n * Given a metadata item, create an opbect to map the option codes to names\n * @param {object} metaItem Metadata item such as a data element or TEA whcih has as option set\n * @returns {object} Object to map the option codes to names\n */\nfunction getOsMap(metaItem) {\n  const osMap = {}\n  for (const opt of metaItem.optionSet.options) {\n    osMap[opt.code] = opt.name\n  }\n  return osMap\n}\n\n/**\n * Given a object with a list of de and tea UIDs, return a map for each, which maps codes to values\n * this is needed so the values in the report use the option names rather than the option codes\n * @param {object} deTeaArr Object with structure {dataElements: [], trackedEntityAttributes: []}\n */\n async function getOptionCodeNameMapping(deTeaUids) {\n  const { dataElements, trackedEntityAttributes } = deTeaUids\n  result = {}\n  const params = {\n    fields: 'id,name,optionSet(options(name,code))',\n    filter: `id:in:[${dataElements.join(',')}]`,\n  }\n  const deOpts = await getUtil('dataElements', params, true)\n  for (const de of deOpts.dataElements) {\n    result[de.id] = getOsMap(de)\n  }\n  params.filter = `id:in:[${trackedEntityAttributes.join(',')}]`\n  const teaOpts = await getUtil('trackedEntityAttributes', params, true)\n  for (const tea of teaOpts.trackedEntityAttributes) {\n    result[tea.id] = getOsMap(tea)\n  }\n  return result\n}\n\n/**\n * Add a dropdown menu under the specified parent element\n * @param {string} parentId Id of parent element which dropdown will be placed in\n * @param {string} id Id of dropdown element so it can be selected later\n * @param {string} text Text to appear on the dropdown\n * @param {array[{name, value}]} options Options for appear in the dropdown\n */\n function addDropdown(parentId, id, text, options, onSelect) {\n  const optionsHtml = options.map(\n    ({ name, value }) => `<a id=\"${value}\" class=\"${id}-option\">${name}</a>`\n  )\n  const dropdownHtml = `\n    <div class=\"dropdown\">\n      <button id=\"${id}\" class=\"dropdown-btn\">${text}</button>\n      <div id=\"dropdown-${id}\" class=\"dropdown-content\">\n        ${optionsHtml.join('')}\n      </div>\n    </div>\n  `\n  $(`#${parentId}`).append(dropdownHtml)\n  $(`#${id}`).on('click', () => {\n    $(`#dropdown-${id}`).toggleClass('show')\n  })\n  $(`.${id}-option`).on('click', function () {\n    const { name, value } = { name: $(this).text(), value: $(this).attr('id') }\n    $(`#${id}`).text(name)\n    $(`#${id}`).attr('option-id', value)\n    onSelect(name, value)\n    $(`#dropdown-${id}`).removeClass('show')\n  })\n}\n\n/**\n * Create HTML to render the given value\n * @param {any} val A value to be placed in the table cell\n * @returns {string} HTML string for table cell element\n */\nfunction td(val) {\n  return `<td>${val === null || val === undefined ? '' : val}</td>`\n}\n\nconst weekSelectText = 'Select a week'\nconst sqlViewUid = 'lQSbeTO4UiY'\nconst uidPageSize = 100\nconst firstNameTea = 'otereslUoZH'\nconst lastNameTea = 'EoUadudZhJK'\nconst des = [\n  'yW214mcMIcs',\n  'z1FCqdwXo7y',\n  'vnu3ddJrVNy',\n  'SSgem2p96rv',\n  'whYAuMgumwc',\n  'yT97oMv0y13',\n]\n\n/**\n * Return the date string numberOfDays after the startDate\n * @param {String} dateString: String to use as start date\n * @param {int} numberOfDays: Days to offset by\n * @returns: String date 6 days after provided date\n */\nfunction dayOffset(dateString, numberOfDays) {\n  const startDate = new Date(dateString)\n  let endDate = new Date(dateString)\n  endDate.setDate(startDate.getDate() + numberOfDays)\n  return endDate.toISOString().slice(0, 10)\n}\n\n/**\n * Use SQL view to get all event UIDs which have certain data elements with date values\n * within the specified range\n * @param {String} startDate: Date to look for data values from\n * @param {String} endData: Date to look for date values to\n * @returns: Array of event uids with data values in the given date range\n */\nasync function getEvUidsSql(startDate, endDate) {\n  const sqlView = await getUtil(\n    'sqlViews',\n    { filter: `id:eq:${sqlViewUid}`, fields: 'id' },\n    true\n  )\n  if (sqlView.sqlViews.length === 0) {\n    throw new Error(\n      `Could not find required SQL view '${sqlViewUid}' in order to locate events`\n    )\n  }\n  const params = {\n    pageSize: uidPageSize,\n    var: [`startDate:${startDate}`, `endDate:${endDate}`],\n  }\n  const pageInfo = await getUtil(`sqlViews/${sqlViewUid}/data`, params, true)\n  const pageCount = pageInfo.pager.pageCount\n  const promises = []\n  for (let i = 1; i <= pageCount; i++) {\n    params.page = i\n    promises.push(\n      getUtil(`sqlViews/${sqlViewUid}/data`, params).then((resp) => {\n        return resp.json()\n      })\n    )\n  }\n  const allData = await Promise.all(promises)\n  const result = []\n  for (const page of allData) {\n    result.push(...page.listGrid.rows.flat())\n  }\n  return result\n}\n\n/**\n * Update the data table with the given information\n * @param {object} teiInfo Object holding tei name and upcoming event information\n */\nfunction addTableRow(teiInfo) {\n  const { name, upcomingEventDates } = teiInfo\n  const rowData = [name.firstName, name.lastName]\n  rowData.push(...upcomingEventDates)\n  $('.data-table > tbody').append(`\n    <tr>\n      ${rowData.map((value) => td(value)).join('')}\n    </tr>\n  `)\n}\n\n/**\n * Given an array of events, return an object with the tei uid associated with the events\n * as the key and the value being another object holding data values in the correct order\n * @param {array} evs Array of DHIS2 events\n * @returns Object mapping tei uids to upcoming appointments\n */\nfunction sortEvsByTei(evs) {\n  const teiResults = {}\n  for (const ev of evs) {\n    const teiUid = ev.trackedEntityInstance\n    if (!(teiUid in teiResults)) {\n      teiResults[teiUid] = {\n        upcomingEventDates: new Array(des.length).fill(null),\n      }\n    }\n    for (idx in des) {\n      const dv = getDataValue(ev.dataValues, des[idx])\n      if (![null, undefined, ''].includes(dv)) {\n        teiResults[teiUid].upcomingEventDates[idx] = dv\n      }\n    }\n  }\n  return teiResults\n}\n\n/**\n * Given a list of tei uids, create a map to return the tei name based on the tei uid as a key\n * @param {array} teiUids Array of tei uids for the events which had relevant data\n * @returns Object to map tei uid to name\n */\nasync function makeTeiNameMap(teiUids) {\n  const teiParams = {\n    fields: 'trackedEntityInstance,attributes(attribute,value)',\n  }\n  const teis = await getByUidsPaged(\n    'trackedEntityInstances',\n    100,\n    teiUids,\n    teiParams\n  )\n  const result = {}\n  for (const tei of teis) {\n    result[tei.trackedEntityInstance] = {\n      firstName: getAttrValue(tei.attributes, firstNameTea),\n      lastName: getAttrValue(tei.attributes, lastNameTea),\n    }\n  }\n  return result\n}\n\n/**\n * What to do when a new week has been selected. Hide table until loaded, then get the new events,\n * process them and update the table\n * @param {string} startDate Earliest string date (YYYY-MM-DD) to match data values on\n * @param {*} endDate Latest string date (YYYY-MM-DD) to match data values on\n */\nasync function refreshData(startDate, endDate) {\n  $('#loader').show()\n  $('#report-content').hide()\n\n  const evUids = await getEvUidsSql(startDate, endDate)\n  const evParams = {\n    fields: 'trackedEntityInstance,dataValues(dataElement,value)',\n  }\n  const evs = await getByUidsPaged('events', 100, evUids, evParams)\n  $('.loading-text').text('Linking events to clients...')\n  const teiData = sortEvsByTei(evs)\n  const teiNameMap = await makeTeiNameMap(Object.keys(teiData))\n  updateTable(teiData, teiNameMap)\n\n  $('#loader').hide()\n  $('#report-content').show()\n}\n\n/**\n * Update the data table with the new data from the teiData param\n * @param {object} teiData Object holding the data for the table\n * @param {object} teiNameMap Object to map the tei uids to names\n */\nfunction updateTable(teiData, teiNameMap) {\n  $('.data-table > tbody').empty()\n  for (const tei in teiData) {\n    teiData[tei].name = teiNameMap[tei]\n    addTableRow(teiData[tei])\n  }\n\n  if (Object.keys(teiData).length === 0) {\n    $('.data-table > tbody').append(`\n    <tr>\n      <td class=\"no-data\" colspan=\"8\"><i>No clients found with appointments for the selected week</i></td>\n    </tr>\n  `)\n  }\n}\n\n/**\n * Refresh the report when a new option is selected from the week select dropdown\n * @param {string} _ Name of selected option (not needed)\n * @param {string} startDate String of selected week start date (YYYY-MM-DD)\n */\nfunction onWeekSelect(_, startDate) {\n  $('#select-week-text').hide()\n  refreshData(startDate, dayOffset(startDate, 13))\n}\n\nfunction getMonday() {\n  const today = new Date()\n  const dayOfTheWeek = today.getDay()\n  const monday = today.getDate() - dayOfTheWeek + (dayOfTheWeek === 0 ? -6 : 1)\n  return new Date(today.setDate(monday)).toISOString().slice(0, 10)\n}\n\n/**\n * Create an array of week options around the current week\n * @param {int} weeksBack Number of weeks before the current week to include\n * @param {int} weeksAfter Number of weeks after the current week to include\n * @returns Array of week options: [{name: '2021W1', value: '2021-01-04'}, {name: '20201W2', value: '2021-01-11'}, ...]\n */\nfunction generateWeekOptions(weeksBack, weeksAfter) {\n  const thisMonday = getMonday()\n  const result = []\n  for (let i = weeksBack; i < weeksAfter + 1; i++) {\n    const weekDate = dayOffset(thisMonday, i * 7)\n    result.push({ name: weekDate, value: weekDate })\n  }\n  return result\n}\n\n/**\n * Starting point of script, coordinates getting the events with datavalues in the selected week\n * getting the tei information from these events and adding this to the table for display\n */\nasync function main() {\n  const weekOptions = generateWeekOptions(-5, 2)\n  addDropdown(\n    'period-select',\n    'week-dropdown',\n    weekSelectText,\n    weekOptions,\n    onWeekSelect\n  )\n}\n\n$(() => {\n  main()\n})\n</script>",
      "publicAccess": "rw------",
      "type": "HTML",
      "externalAccess": false,
      "cacheStrategy": "NO_CACHE",
      "lastUpdatedBy": {
        "id": "M5zQapPyTZI"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "reportParams": {
        "paramGrandParentOrganisationUnit": false,
        "paramReportingPeriod": false,
        "paramOrganisationUnit": true,
        "paramParentOrganisationUnit": false
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "userGroupAccesses": [],
      "translations": [],
      "userAccesses": []
    },
    {
      "created": "2020-12-17T10:18:04.484",
      "lastUpdated": "2021-01-11T10:08:39.163",
      "name": "Clients managed by PW",
      "id": "L40T81e6vit",
      "designContent": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Client data by peer worker</title>\n    <style>body {\n  font-family: 'Roboto', sans-serif;\n}\n.center-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n#report-title {\n  font-weight: 400;\n}\n#data-table {\n  border-collapse: collapse;\n  width: 100%;\n}\n#data-table td,\n#data-table th {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n#data-table th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  background-color: #1a6794;\n  color: white;\n}\n#data-table tr:nth-child(even) {\n  background-color: #f2faff;\n}\n#data-table td:nth-child(n + 2) {\n  text-align: center;\n}\n\n.small-font {\n  font-size: 0.9em;\n}\n\n.no-data {\n  text-align: center;\n}\n\n#loader {\n  margin-top: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.loader {\n  border: 4px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 4px solid #3498db;\n  width: 30px;\n  height: 30px;\n  animation: spin 1s linear infinite;\n}\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.loading-text {\n  margin-left: 10px;\n}\n\n.report-header {\n  padding-bottom: 15px;\n}\n\n.flex {\n  display: flex;\n}\n\n.custom-select {\n  padding: 0 30px;\n}\n\n.dropdown-btn {\n  background-color: #3498db;\n  color: white;\n  padding: 16px;\n  font-size: 16px;\n  border: none;\n  cursor: pointer;\n  width: 200px;\n}\n\n.dropdown-btn:hover,\n.dropdown-btn:focus {\n  background-color: #2980b9;\n}\n\n.dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  background-color: #f1f1f1;\n  min-width: 160px;\n  width: 100%;\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n}\n\n.dropdown-content a {\n  color: black;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block;\n  overflow: auto;\n}\n.dropdown-content a:hover {\n  background-color: #ddd;\n}\n\n.show {\n  display: block;\n}\n</style>\n  </head>\n  <body>\n    <div>\n      <div class=\"center-content report-header\">\n        <h1 id=\"report-title\">Client Data by Peer Worker</h1>\n        <span id=\"user-selections\" class=\"flex\">\n          <div id=\"peerworker-select\" class=\"custom-select\"></div>\n        </span>\n      </div>\n      <div id=\"report-content\" style=\"display: none\">\n        <table id=\"data-table\" class=\"small-font\">\n          <thead>\n            <tr>\n              <th>first name</th>\n              <th>last name</th>\n              <th>phone number</th>\n              <th>contact by phone ? Y/N</th>\n              <th>Best place to meet</th>\n              <th>Best time to meet</th>\n              <th>KP type</th>\n              <th>age</th>\n              <th>sex</th>\n              <th>HIV status</th>\n              <th style=\"width: 6em\">Last HIV test</th>\n              <th>ART status</th>\n            </tr>\n          </thead>\n          <tbody></tbody>\n        </table>\n      </div>\n    </div>\n    <span id=\"loader\">\n      <div class=\"loader\"></div>\n      <div class=\"loading-text\">Loading tracked entity instances...</div>\n    </span>\n  </body>\n</html>\n<script> const GLOBAL = {\n  programs: {\n    hotspots: 'TljZtip0OB2',\n    clients: 'xrwtYQH5ZLa',\n    peerWorkers: 'VlhhDEete7p',\n    contacts: 'yoyUtVn5Gop',\n  },\n  names: {\n    TljZtip0OB2: ['garBktaoHJs'],\n    xrwtYQH5ZLa: ['otereslUoZH', 'EoUadudZhJK'],\n    VlhhDEete7p: ['otereslUoZH', 'EoUadudZhJK'],\n    yoyUtVn5Gop: ['otereslUoZH', 'EoUadudZhJK'],\n  },\n  relationTypeToPrograms: {\n    Fu2r3tVR5PL: ['TljZtip0OB2', 'xrwtYQH5ZLa'],\n    PlgvrJqKITC: ['VlhhDEete7p', 'xrwtYQH5ZLa'],\n    YWSVH34f3AB: ['yoyUtVn5Gop', 'xrwtYQH5ZLa'],\n  },\n}\n\n/**\n * Swap keys and values on an object (only works for literal values)\n * @param obj {object}: Object with depth 1 and literal values\n * @returns {object}: With keys and values swapped\n */\nfunction reverseObj(obj) {\n  const result = {}\n  Object.keys(obj).map((key) => (result[obj[key]] = key))\n  return result\n}\n\n/**\n * Get attribute value from TEI attributes\n * @param attributes {array}: Array of attributes on the TEI\n * @param attributeUid {string}: Attribute uid to look for\n * @returns {string || undefined}: Value for specified attribute\n */\nconst getAttrValue = (attributes, attributeUid) => {\n  const filteredAttributes = attributes.filter(\n    (attr) => attr.attribute === attributeUid\n  )\n  if (filteredAttributes.length === 1) {\n    return filteredAttributes[0].value\n  } else if (filteredAttributes.length > 1) {\n    throw new Error(`More than one value found for ${attributeUid}`)\n  } else {\n    return null\n  }\n}\n\n/**\n * Get the value associated with a given data element if it exists in the given data values\n * @param {Array} dvs Array of DHIS2 data values\n * @param {string} deUid DHIS2 data element UID\n */\nfunction getDataValue(dvs, deUid) {\n  const filteredDvs = dvs.filter((dv) => dv.dataElement === deUid)\n  if (filteredDvs.length === 1) {\n    return filteredDvs[0].value\n  } else if (filteredDvs.length > 1) {\n    throw new Error(`More than one value found for ${deUid}`)\n  } else {\n    return null\n  }\n}\n\n/**\n * Get all data for all TEIs in the specified program(s)\n * @param programUids {string}: String for a DHIS2 program UID\n * @returns {array}: Array of DHIS2 TEI objects\n */\nasync function getTeis(programUid, orgUnit) {\n  const params = {\n    program: programUid,\n    ou: orgUnit || (await getRootOU()),\n    ouMode: 'DESCENDANTS',\n    fields:\n      'trackedEntityInstance,attributes,relationships(relationshipType,from,to),enrollments(program)',\n  }\n  const resp = await getUtil('trackedEntityInstances', params)\n  const data = await resp.json()\n  return data['trackedEntityInstances']\n}\n\n/**\n * Search for the TEI name from the attributes, where attribute needed depends on the program\n * @param prgUid {string}: DHIS2 program uid\n * @param attributes {object}: DHIS2 TEI attributes\n * @returns {string}: TEI name identifier from attributes\n */\nfunction getTeiName(prgUid, attributes) {\n  const nameFields = GLOBAL.names[prgUid]\n  let name = []\n  for (const attrUid of nameFields) {\n    const attrVal = getAttrValue(attributes, attrUid)\n    if (!!attrVal) {\n      name.push(attrVal)\n    }\n  }\n  return name.join(' ')\n}\n\n/**\n * Get all TEIs in the system, by program\n * @returns {object}: Object with program names as keys and array values with\n *                    the teis for that program\n */\nasync function getTeisByProgram() {\n  const teisByPrg = {}\n  const rootOU = await getRootOU()\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = await getTeis(prgUid, rootOU)\n    teisByPrg[prgName] = teis\n  }\n  return teisByPrg\n}\n\n/**\n * Create a map from teiUid to teiName\n * @param {object} teisByPrg: Object with program names as keys and array values with\n *                            the teis for that program\n * @returns {object}: Map from tei uid to tei name\n */\nfunction getTeiUidNameMap(teisByPrg) {\n  const teiNameMap = {}\n  for (const prgName in GLOBAL.programs) {\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      teiNameMap[tei.trackedEntityInstance] =\n        getTeiName(prgUid, tei.attributes) || ''\n    }\n  }\n  return teiNameMap\n}\n\n/* EXAMPLE relationship map structure\n{\n  \"hotspots\": {\n    \"abc\": {\n      \"name\": \"HS1\", \n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"clients\": {\n    \"def\": {\n      \"name\": \"Cl1\", \n      \"hotspots\": {\"abc\": {\"name\": \"HS1\"}},\n      \"peerWorkers\": {\"ghi\": {\"name\": \"PW1\"}},\n      \"contacts\": {\"jkl\": {\"name\": \"Co1\"}}\n    }\n  },\n  \"peerWorkers\": {\n    \"ghi\": {\n      \"name\": \"PW1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  },\n  \"contacts\": {\n    \"jkl\": {\n      \"name\": \"Co1\",\n      \"clients\": {\"def\": {\"name\": \"Cl1\"}}\n    }\n  }\n}\n*/\n\n/**\n * Create mapping between different TEIs from each program\n * @returns {object} Object detailing relationships between each TEI by program\n */\n async function makeRelationshipMap() {\n  const prgUidNameMap = reverseObj(GLOBAL.programs)\n  const teisByPrg = await getTeisByProgram()\n  const teiUidNameMap = getTeiUidNameMap(teisByPrg)\n  const teiMap = {}\n  for (const prgName in GLOBAL.programs) {\n    teiMap[prgName] = {}\n    const prgUid = GLOBAL.programs[prgName]\n    const teis = teisByPrg[prgName]\n    for (const tei of teis) {\n      const teiUid = tei.trackedEntityInstance\n      const teiInfo = { name: teiUidNameMap[teiUid] }\n      for (const rel of tei.relationships) {\n        const programs = GLOBAL.relationTypeToPrograms[rel.relationshipType]\n        const otherProgram = programs.filter(\n          (thisPrgUid) => thisPrgUid !== prgUid\n        )[0]\n        const otherPrgName = prgUidNameMap[otherProgram]\n        const relTeis = [\n          rel.from.trackedEntityInstance.trackedEntityInstance,\n          rel.to.trackedEntityInstance.trackedEntityInstance,\n        ]\n        const otherTeiUid = relTeis.filter(\n          (thisTeiUid) => thisTeiUid !== teiUid\n        )[0]\n        if (!(otherPrgName in teiInfo)) {\n          teiInfo[otherPrgName] = {}\n        }\n        teiInfo[otherPrgName][otherTeiUid] = {\n          name: teiUidNameMap[otherTeiUid],\n        }\n      }\n      teiMap[prgName][teiUid] = teiInfo\n    }\n  }\n  return teiMap\n}\n\n// - - - - - - - - - - - - - //\n/* --- General Utilities --- */\n// - - - - - - - - - - - - - //\n\n/**\n * Return the id for the root org unit in the system\n * @returns {string}: String for the root OU in the system\n */\nasync function getRootOU() {\n  const params = {\n    fields: 'id',\n    filter: 'level:eq:1',\n  }\n  const resp = await getUtil('organisationUnits', params)\n  const data = await resp.json()\n  const rootOu = data.organisationUnits\n  if (rootOu.length === 1) {\n    return rootOu[0].id\n  } else {\n    throw `Found ${rootOu.length} root OUs, need only 1 root OU to continue`\n  }\n}\n\n/**\n * Returns a promise which resolves to the requested data\n * @param {string} endpoint DHIS2 endpoint to reqest to\n * @param {object} params Parameters for request\n * @returns {Promise} Which resolves to the requested data\n */\nfunction getUtil(endpoint, params, toJson = false) {\n  const paramStr = formatParams(params)\n  const reqUrl = `/api/${endpoint}?${paramStr}`\n  if (toJson) {\n    return fetch(reqUrl).then((resp) => {\n      return resp.json()\n    })\n  } else {\n    return fetch(reqUrl)\n  }\n}\n\n/**\n * Process a key: value params object and return a params url string\n * @param {object} params: An object with keys and strings or string arrays to format\n * @returns {String}: A string with the keys and values formatted for an api request\n */\nconst formatParams = (params) => {\n  const paramsArr = []\n  for (key in params) {\n    if (params.hasOwnProperty(key)) {\n      if (Array.isArray(params[key])) {\n        for (const value of params[key]) {\n          paramsArr.push(`${key}=${value}`)\n        }\n      } else {\n        paramsArr.push(`${key}=${params[key]}`)\n      }\n    }\n  }\n  return paramsArr.join('&')\n}\n\n/**\n * Take a flat array and transorm into an array or arrays with each inner array containing\n * chunkSize elements from the original array\n * @param {Array} arr Array to chunk\n * @param {Int} chunkSize Size of each chunk\n */\nfunction chunkArray(arr, chunkSize) {\n  const result = []\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    result.push(arr.slice(i, i + chunkSize))\n  }\n  return result\n}\n\n/**\n *\n * @param {string} endpoint DHIS2 endpoint to get data from\n * @param {Int} pageSize Integer for number of results per page\n * @param {Array} uids Array of UIDs to search for\n * @param {obj} params Object containing query params\n */\n async function getByUidsPaged(endpoint, pageSize, uids, params) {\n  const uidChunks = chunkArray(uids, pageSize || params.pageSize || 50)\n  params = params || {}\n  const promises = []\n  for (const uidChunk of uidChunks) {\n    params.trackedEntityInstance = uidChunk.join(';')\n    promises.push(\n      getUtil(endpoint, params).then((resp) => {\n        return resp.json()\n      })\n    )\n  }\n  const allTeis = await Promise.all(promises)\n  const result = []\n  for (const teisPage of allTeis) {\n    result.push(...teisPage.trackedEntityInstances)\n  }\n  return result\n}\n\n/**\n * Return the most recent value for the specified data element for the given TEI\n * most recent is determined using the event dates\n * @param {object} tei DHIS2 tracked entity instance\n * @param {string} deUid DHIS2 data element uid\n */\n function getMostRecentDataValue(evs, deUid) {\n  let dv = null\n  for (const ev of evs) {\n    const evDataValue = getDataValue(ev.dataValues, deUid)\n    dv = !!evDataValue ? evDataValue : dv\n  }\n  return dv\n}\n\n// Close the dropdown menu if the user clicks outside of it\nwindow.onclick = function (event) {\n  if (!event.target.matches('.dropdown-btn')) {\n    $('.dropdown-content').removeClass('show')\n  }\n}\n\n/**\n * Given a metadata item, create an opbect to map the option codes to names\n * @param {object} metaItem Metadata item such as a data element or TEA whcih has as option set\n * @returns {object} Object to map the option codes to names\n */\nfunction getOsMap(metaItem) {\n  const osMap = {}\n  for (const opt of metaItem.optionSet.options) {\n    osMap[opt.code] = opt.name\n  }\n  return osMap\n}\n\n/**\n * Given a object with a list of de and tea UIDs, return a map for each, which maps codes to values\n * this is needed so the values in the report use the option names rather than the option codes\n * @param {object} deTeaArr Object with structure {dataElements: [], trackedEntityAttributes: []}\n */\n async function getOptionCodeNameMapping(deTeaUids) {\n  const { dataElements, trackedEntityAttributes } = deTeaUids\n  result = {}\n  const params = {\n    fields: 'id,name,optionSet(options(name,code))',\n    filter: `id:in:[${dataElements.join(',')}]`,\n  }\n  const deOpts = await getUtil('dataElements', params, true)\n  for (const de of deOpts.dataElements) {\n    result[de.id] = getOsMap(de)\n  }\n  params.filter = `id:in:[${trackedEntityAttributes.join(',')}]`\n  const teaOpts = await getUtil('trackedEntityAttributes', params, true)\n  for (const tea of teaOpts.trackedEntityAttributes) {\n    result[tea.id] = getOsMap(tea)\n  }\n  return result\n}\n\n/**\n * Add a dropdown menu under the specified parent element\n * @param {string} parentId Id of parent element which dropdown will be placed in\n * @param {string} id Id of dropdown element so it can be selected later\n * @param {string} text Text to appear on the dropdown\n * @param {array[{name, value}]} options Options for appear in the dropdown\n */\n function addDropdown(parentId, id, text, options, onSelect) {\n  const optionsHtml = options.map(\n    ({ name, value }) => `<a id=\"${value}\" class=\"${id}-option\">${name}</a>`\n  )\n  const dropdownHtml = `\n    <div class=\"dropdown\">\n      <button id=\"${id}\" class=\"dropdown-btn\">${text}</button>\n      <div id=\"dropdown-${id}\" class=\"dropdown-content\">\n        ${optionsHtml.join('')}\n      </div>\n    </div>\n  `\n  $(`#${parentId}`).append(dropdownHtml)\n  $(`#${id}`).on('click', () => {\n    $(`#dropdown-${id}`).toggleClass('show')\n  })\n  $(`.${id}-option`).on('click', function () {\n    const { name, value } = { name: $(this).text(), value: $(this).attr('id') }\n    $(`#${id}`).text(name)\n    $(`#${id}`).attr('option-id', value)\n    onSelect(name, value)\n    $(`#dropdown-${id}`).removeClass('show')\n  })\n}\n\n\nconst peerWorkerTet = 'eXep8PFvTd4'\nconst peerWorkerSelectText = 'Select peer worker'\nconst teas = {\n  firstName: 'otereslUoZH',\n  lastName: 'EoUadudZhJK',\n  phoneNumber: 'rqaCy1kmwRl',\n  contactByPhone: 'oi8LJ3xW7oO',\n  bestMeetPlace: 'UdU5QmU5mGn',\n  meetTimeFrom: 'XH7HLrN6Ax3',\n  meetTimeTo: 'svGo1tMPYhn',\n  kpType: 'E7mjvLFQG9H',\n  age: 'OtPdWZIGyvn',\n  sex: 'fflBHHI88oe',\n  hivAtEnrol: 'tmruMXIFo2s',\n}\nconst hivTestPs = 'K42Ut4xpKVT'\nconst hivTestResultDe = 'bvxCroxAwLk'\nconst artStatusDe = 'r3UGeljqNxM'\nconst des = [hivTestResultDe, artStatusDe]\nvar relationshipMap\nvar optionCodeNameMap\n\n$(() => {\n  main()\n})\n\n/**\n * Get system relationships and add dropdowns to select quarter and hotspot\n */\nasync function main() {\n  $('.container', parent.document).css({\n    width: '85rem',\n    'margin-right': 'auto',\n    'margin-left': 'auto',\n  }) // Set report width and center\n  const selectedOU = dhis2.report.organisationUnit.id\n  relationshipMap = await makeRelationshipMap()\n  optionCodeNameMap = await getOptionCodeNameMapping({\n    dataElements: des,\n    trackedEntityAttributes: [teas.hivAtEnrol, teas.sex, teas.kpType],\n  })\n  const peerWorkerOptions = await getPeerWorkersByOU(selectedOU)\n  addDropdown(\n    'peerworker-select',\n    'peerworker-dropdown',\n    peerWorkerSelectText,\n    peerWorkerOptions,\n    updateTable\n  )\n  $('#report-content').show()\n  $('#loader').hide()\n}\n\nasync function getPeerWorkersByOU(ouUid) {\n  const params = {\n    ou: ouUid,\n    ouMode: 'DESCENDANTS',\n    trackedEntityType: peerWorkerTet,\n  }\n  const pwData = await getUtil('trackedEntityInstances', params, true)\n  return pwData.trackedEntityInstances.map((tei) => ({\n    value: tei.trackedEntityInstance,\n    name: relationshipMap.peerWorkers[tei.trackedEntityInstance].name,\n  }))\n}\n\n/**\n * When the period or hotspot are updated, get the new data and render it\n * @param {string} periodName DHIS2 period format YYYYQN\n * @param {string} hotspotUid UID of hotspot TEI\n */\nasync function updateTable(peerWorkerName, peerWorkerUid) {\n  const tableData = await getTableData(peerWorkerName, peerWorkerUid)\n  renderTable(tableData)\n}\n\n/**\n * Given a period and hotspot, get the relevant data via relationships\n * @param {string} periodName DHIS2 period format YYYYQN\n * @param {string} hotspotUid UID of hotspot TEI\n */\nasync function getTableData(peerWorkerName, peerWorkerUid) {\n  const pw = relationshipMap.peerWorkers[peerWorkerUid]\n  if (!('clients' in pw)) {\n    return []\n  }\n  const clientUids = Object.keys(pw.clients)\n  const params = {\n    program: GLOBAL.programs.clients,\n    fields: '*',\n  }\n  const result = []\n  const clients = await getByUidsPaged(\n    'trackedEntityInstances',\n    50,\n    clientUids,\n    params\n  )\n  for (const client of clients) {\n    const teaValues = getAttrValues(client.attributes, teas)\n    const evs = teiEvsInPeriod(client, '1900-01-01', '3000-01-01')\n    const hivTestEvs = evs.filter((ev) => ev.programStage === hivTestPs)\n    const lastHivTestEvDate = hivTestEvs.length\n      ? hivTestEvs[hivTestEvs.length - 1].eventDate.slice(0, 10)\n      : null\n    const artStatus = getMostRecentDataValue(evs, artStatusDe)\n    const { meetTimeFrom, meetTimeTo } = teaValues\n    const bestTimetoMeet =\n      !!meetTimeFrom && !!meetTimeTo\n        ? `${teaValues.meetTimeFrom} - ${teaValues.meetTimeTo}`\n        : null\n    result.push({\n      firstName: teaValues.firstName,\n      lastName: teaValues.lastName,\n      phoneNumber: teaValues.phoneNumber,\n      contactByPhone: teaValues.contactByPhone,\n      bestMeetPlace: teaValues.bestMeetPlace,\n      bestTimetoMeet,\n      kpType: teaValues.kpType,\n      age: teaValues.age,\n      sex: teaValues.sex,\n      hivStatus: getHivStatus(client, evs, teaValues),\n      lastHivTestEvDate,\n      artStatus: !!artStatus ? optionCodeNameMap[artStatusDe][artStatus] : null,\n    })\n  }\n  return result\n}\n\nfunction getAttrValues(attributes, teas) {\n  const result = {}\n  for (const tea in teas) {\n    const teaUid = teas[tea]\n    if (teaUid in optionCodeNameMap) {\n      result[tea] = optionCodeNameMap[teaUid][getAttrValue(attributes, teaUid)]\n    } else {\n      result[tea] = getAttrValue(attributes, teaUid)\n    }\n  }\n  return result\n}\n\nfunction getHivStatus(tei, evs, teaValues) {\n  const hivResultProgramStage = getMostRecentDataValue(evs, hivTestResultDe)\n  if (!!hivResultProgramStage) {\n    return optionCodeNameMap[hivTestResultDe][hivResultProgramStage]\n  } else {\n    return teaValues.hivAtEnrol\n  }\n}\n\n/**\n * Get a TEIs events in the specified period and include appropriate logging if issues found.\n * Also sort events by eventDate\n * @param {obj} tei DHIS2 tracked entity instance\n */\nfunction teiEvsInPeriod(tei, startDate, endDate) {\n  const teiUid = tei.trackedEntityInstance\n  const enrols = tei.enrollments.length\n  if (enrols === 0) {\n    return []\n  } else if (enrols > 1) {\n    console.warn(\n      `TEI ${teiUid} has more than one enrollment, using first ${tei.enrollments[0].enrollment}`\n    )\n  }\n  const evs = tei.enrollments[0].events\n  if (evs.length < 1) {\n    return []\n  }\n  const evsFiltered = evs.filter(\n    (ev) => ev.eventDate >= startDate && ev.eventDate <= endDate\n  )\n  const evsSorted = evsFiltered.sort((ev1, ev2) =>\n    ev1.eventDate > ev2.eventDate ? 1 : -1\n  )\n  return evsSorted\n}\n\nfunction td(val) {\n  return `<td>${val === null ? '' : val}</td>`\n}\n\n/**\n * Take array of data and map it to the correct columns in the table\n * @param {Array} tableData Array of data to be rendered\n */\nfunction renderTable(tableData) {\n  const $tbody = $('#data-table').children('tbody')\n  $tbody.empty()\n  for (const rowData of tableData) {\n    const {\n      firstName,\n      lastName,\n      phoneNumber,\n      contactByPhone,\n      bestMeetPlace,\n      bestTimetoMeet,\n      kpType,\n      age,\n      sex,\n      hivStatus,\n      lastHivTestEvDate,\n      artStatus,\n    } = rowData\n    $tbody.append(\n      `\n        <tr>\n         ${td(firstName)}\n         ${td(lastName)}\n         ${td(phoneNumber)}\n         ${td(contactByPhone)}\n         ${td(bestMeetPlace)}\n         ${td(bestTimetoMeet)}\n         ${td(kpType)}\n         ${td(age)}\n         ${td(sex)}\n         ${td(hivStatus)}\n         ${td(lastHivTestEvDate)}\n         ${td(artStatus)}\n        </tr>\n        `\n    )\n  }\n  if (tableData.length === 0) {\n    $tbody.append(\n      `<tr><td colspan=\"12\" class=\"no-data\"><p><i>No data found for the selected period and hotspot</i></p></td></tr>`\n    )\n  }\n}\n</script>",
      "publicAccess": "rw------",
      "type": "HTML",
      "externalAccess": false,
      "cacheStrategy": "NO_CACHE",
      "lastUpdatedBy": {
        "id": "M5zQapPyTZI"
      },
      "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": false,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
      },
      "reportParams": {
        "paramGrandParentOrganisationUnit": false,
        "paramReportingPeriod": false,
        "paramOrganisationUnit": true,
        "paramParentOrganisationUnit": false
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "userGroupAccesses": [],
      "translations": [],
      "userAccesses": []
    }
  ],
  "dashboards": [
    {
      "created": "2021-04-26T14:28:06.933",
      "lastUpdated": "2021-05-06T23:38:40.267",
      "name": "Achievement this Fiscal Year",
      "id": "NZ37JxCURbr",
      "publicAccess": "r-------",
      "externalAccess": false,
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "favorites": [],
      "userGroupAccesses": [],
      "dashboardItems": [
        {
          "lastUpdated": "2021-05-06T23:38:40.267",
          "id": "URPkmByGdvF",
          "created": "2021-05-06T23:38:40.252",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 20,
          "interpretationCount": 0,
          "width": 30,
          "x": 22,
          "y": 27,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "xuRE4BJqiV0"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T23:38:40.267",
          "id": "MrCLyNSnhQW",
          "created": "2021-05-06T23:38:40.252",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 20,
          "interpretationCount": 0,
          "width": 22,
          "x": 0,
          "y": 27,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "t3DZRzLI0wl"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T23:38:40.267",
          "id": "upD2vwImNgQ",
          "created": "2021-05-06T23:38:40.252",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 19,
          "interpretationCount": 0,
          "width": 22,
          "x": 30,
          "y": 8,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "UXasAB4h5qa"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T23:38:40.268",
          "id": "e0kV1nPVbNN",
          "created": "2021-05-06T23:38:40.252",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 19,
          "interpretationCount": 0,
          "width": 30,
          "x": 0,
          "y": 8,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "Ifi9hGntlsR"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T23:38:40.268",
          "id": "QY4VzNARNxE",
          "created": "2021-05-06T23:38:40.252",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 8,
          "interpretationCount": 0,
          "width": 10,
          "x": 32,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "tP1ENrAN8vr"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T23:38:40.268",
          "id": "ip1nZfrzbrk",
          "created": "2021-05-06T23:38:40.252",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 8,
          "interpretationCount": 0,
          "width": 10,
          "x": 42,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "LjYkGFic1eB"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T23:38:40.268",
          "id": "gmm14u4nSk9",
          "created": "2021-05-06T23:38:40.252",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 8,
          "interpretationCount": 0,
          "width": 10,
          "x": 22,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "ou1dpJs0lRT"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T23:38:40.268",
          "id": "ffHLW2G7RQj",
          "created": "2021-05-06T23:38:40.252",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 8,
          "interpretationCount": 0,
          "width": 10,
          "x": 12,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "JjIAAXxCBUV"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T23:38:40.268",
          "id": "ZHKK8Pbp7Qv",
          "created": "2021-05-06T23:38:40.252",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 8,
          "interpretationCount": 0,
          "width": 12,
          "x": 0,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "ET24pBrrreD"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        }
      ],
      "translations": [],
      "userAccesses": []
    },
    {
      "created": "2021-04-23T01:17:19.827",
      "lastUpdated": "2021-05-06T20:07:22.570",
      "name": "ART Case Management ",
      "id": "xDljR9WU9ru",
      "publicAccess": "r-------",
      "externalAccess": false,
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "favorites": [],
      "userGroupAccesses": [],
      "dashboardItems": [
        {
          "lastUpdated": "2021-05-06T20:07:22.570",
          "id": "TGEnOyrHoH4",
          "created": "2021-05-06T20:07:22.549",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 10,
          "interpretationCount": 0,
          "width": 15,
          "x": 15,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "mG6slsM2BGO"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T20:07:22.570",
          "id": "Qs0QJ86r39h",
          "created": "2021-05-06T20:07:22.550",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 26,
          "interpretationCount": 0,
          "width": 30,
          "x": 0,
          "y": 32,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "aKhzC94H2TV"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T20:07:22.570",
          "id": "MfwfMEhJNCq",
          "created": "2021-05-06T20:07:22.550",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 10,
          "interpretationCount": 0,
          "width": 15,
          "x": 0,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "VwtCHz84tyq"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T20:07:22.571",
          "id": "cs4IFLH3Zlp",
          "created": "2021-05-06T20:07:22.550",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 10,
          "interpretationCount": 0,
          "width": 15,
          "x": 30,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "an9NYtbh7A6"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T20:07:22.571",
          "id": "A07ueldpdop",
          "created": "2021-05-06T20:07:22.550",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 22,
          "interpretationCount": 0,
          "width": 28,
          "x": 30,
          "y": 10,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "nyeFttIaSoB"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T20:07:22.571",
          "id": "cWAfZttph3X",
          "created": "2021-05-06T20:07:22.550",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 22,
          "interpretationCount": 0,
          "width": 30,
          "x": 0,
          "y": 10,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "c9h1mrzLF3x"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        }
      ],
      "translations": [],
      "userAccesses": []
    },
    {
      "created": "2021-04-19T15:24:13.997",
      "lastUpdated": "2021-05-06T23:53:13.484",
      "name": "Custom reports",
      "id": "hA2LU6pFdEb",
      "publicAccess": "r-------",
      "externalAccess": false,
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "M5zQapPyTZI"
      },
      "favorites": [],
      "userGroupAccesses": [],
      "dashboardItems": [
        {
          "lastUpdated": "2021-05-06T22:00:58.280",
          "id": "kKZr1wmA4AM",
          "created": "2021-05-06T22:00:58.263",
          "type": "REPORTS",
          "externalAccess": false,
          "contentCount": 6,
          "height": 19,
          "interpretationCount": 0,
          "width": 14,
          "x": 1,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "favorites": [],
          "reports": [
            {
              "id": "byCmtyPZMHU"
            },
            {
              "id": "L40T81e6vit"
            },
            {
              "id": "rgaLgFXvJrD"
            },
            {
              "id": "MiIoZRISxiS"
            },
            {
              "id": "byCmtyPZMHU"
            },
            {
              "id": "sGuUTAlSKBo"
            }
          ],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        }
      ],
      "translations": [],
      "userAccesses": [
        {
          "access": "rw------",
          "displayName": "Kayla Stankevitz",
          "id": "p3NgGRWcZUr",
          "userUid": "p3NgGRWcZUr"
        }
      ]
    },
    {
      "created": "2021-05-06T22:11:38.289",
      "lastUpdated": "2021-05-06T23:53:20.149",
      "name": "HIV Testing Appointments",
      "id": "truMtvpvwP0",
      "publicAccess": "r-------",
      "externalAccess": false,
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "favorites": [],
      "userGroupAccesses": [],
      "dashboardItems": [
        {
          "lastUpdated": "2021-05-06T22:11:38.289",
          "id": "YWgQZIZyNNQ",
          "created": "2021-05-06T22:11:38.277",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 13,
          "interpretationCount": 0,
          "width": 20,
          "x": 0,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "wnU4CP0CiEb"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T22:11:38.290",
          "id": "jGmNRazaeVM",
          "created": "2021-05-06T22:11:38.277",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 13,
          "interpretationCount": 0,
          "width": 19,
          "x": 20,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "BsNjimLJEnQ"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T22:11:38.290",
          "id": "XlKtduu5Ibo",
          "created": "2021-05-06T22:11:38.277",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 33,
          "interpretationCount": 0,
          "width": 28,
          "x": 30,
          "y": 13,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "twjqEs91yXF"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T22:11:38.290",
          "id": "cc7xZVx100y",
          "created": "2021-05-06T22:11:38.277",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 33,
          "interpretationCount": 0,
          "width": 30,
          "x": 0,
          "y": 13,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "M83ZxwnXdqX"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        }
      ],
      "translations": [],
      "userAccesses": []
    },
    {
      "created": "2021-05-06T20:20:38.502",
      "lastUpdated": "2021-05-06T23:53:26.361",
      "name": "PrEP Case Management",
      "id": "uRe9D6l0uVk",
      "publicAccess": "r-------",
      "externalAccess": false,
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "favorites": [],
      "userGroupAccesses": [],
      "dashboardItems": [
        {
          "lastUpdated": "2021-05-06T20:20:38.502",
          "id": "nT93NJSrrGY",
          "created": "2021-05-06T20:20:38.491",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 26,
          "interpretationCount": 0,
          "width": 29,
          "x": 27,
          "y": 12,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "VnJVFDI77Zu"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T20:20:38.503",
          "id": "ubcd8g8nR4M",
          "created": "2021-05-06T20:20:38.491",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 12,
          "interpretationCount": 0,
          "width": 16,
          "x": 16,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "f9Zm8D0CiZs"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T20:20:38.503",
          "id": "beApnVX4H8r",
          "created": "2021-05-06T20:20:38.491",
          "type": "CHART",
          "externalAccess": false,
          "contentCount": 1,
          "height": 12,
          "interpretationCount": 0,
          "width": 16,
          "x": 0,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "chart": {
            "id": "vkWVUMk6XWb"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T20:20:38.503",
          "id": "MJy12Yu17K8",
          "created": "2021-05-06T20:20:38.491",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 26,
          "interpretationCount": 0,
          "width": 27,
          "x": 0,
          "y": 12,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "flRyD0tJ80U"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        }
      ],
      "translations": [],
      "userAccesses": []
    },
    {
      "created": "2021-05-06T18:33:14.011",
      "lastUpdated": "2021-05-06T23:53:33.858",
      "name": "Referrals",
      "id": "bssraK0EGJH",
      "publicAccess": "r-------",
      "externalAccess": false,
      "lastUpdatedBy": {
        "id": "p3NgGRWcZUr"
      },
      "user": {
        "id": "p3NgGRWcZUr"
      },
      "favorites": [],
      "userGroupAccesses": [],
      "dashboardItems": [
        {
          "lastUpdated": "2021-05-06T18:58:10.975",
          "id": "y68KtmK9W62",
          "created": "2021-05-06T18:58:10.950",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 18,
          "interpretationCount": 0,
          "width": 30,
          "x": 28,
          "y": 17,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "UyhvQ0sIGsq"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T18:58:10.976",
          "id": "rfxgKrllsRp",
          "created": "2021-05-06T18:58:10.950",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 17,
          "interpretationCount": 0,
          "width": 28,
          "x": 0,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "EBxBtLTXz67"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T18:58:10.976",
          "id": "U07SFWyYhS9",
          "created": "2021-05-06T18:58:10.950",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 18,
          "interpretationCount": 0,
          "width": 28,
          "x": 0,
          "y": 35,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "UsiRifRCny5"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T18:58:10.977",
          "id": "nFA2bybLczM",
          "created": "2021-05-06T18:58:10.950",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 18,
          "interpretationCount": 0,
          "width": 28,
          "x": 0,
          "y": 17,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "eYn2DxsYEMB"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T18:58:10.977",
          "id": "Nbmwpk0AgFm",
          "created": "2021-05-06T18:58:10.950",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 18,
          "interpretationCount": 0,
          "width": 30,
          "x": 28,
          "y": 35,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "vD7FlA0Rknh"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        },
        {
          "lastUpdated": "2021-05-06T18:58:10.977",
          "id": "svHvROReKl4",
          "created": "2021-05-06T18:58:10.950",
          "type": "EVENT_REPORT",
          "externalAccess": false,
          "contentCount": 1,
          "height": 17,
          "interpretationCount": 0,
          "width": 30,
          "x": 28,
          "y": 0,
          "interpretationLikeCount": 0,
          "favorite": false,
          "access": {
            "read": true,
            "update": true,
            "externalize": true,
            "delete": true,
            "write": true,
            "manage": true
          },
          "eventReport": {
            "id": "iWYFNBOttUN"
          },
          "favorites": [],
          "reports": [],
          "translations": [],
          "userGroupAccesses": [],
          "attributeValues": [],
          "resources": [],
          "users": [],
          "userAccesses": []
        }
      ],
      "translations": [],
      "userAccesses": []
    }                    
  ]
}